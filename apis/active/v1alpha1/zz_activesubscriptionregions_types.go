// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActiveSubscriptionRegionsInitParameters struct {

	// Flag required to be set when one or more regions is to be deleted, if the flag is not set an error will be thrown
	// Delete regions flag has to be set for re-creating and deleting regions
	DeleteRegions *bool `json:"deleteRegions,omitempty" tf:"delete_regions,omitempty"`

	// Cloud networking details, per region, documented below
	// Cloud networking details, per region (multiple regions for Active-Active cluster)
	Region []ActiveSubscriptionRegionsRegionInitParameters `json:"region,omitempty" tf:"region,omitempty"`

	// ID of the subscription that the regions belong to. Modifying this attribute will force creation of a new resource.
	// ID of the subscription that the regions belong to
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`
}

type ActiveSubscriptionRegionsObservation struct {

	// Flag required to be set when one or more regions is to be deleted, if the flag is not set an error will be thrown
	// Delete regions flag has to be set for re-creating and deleting regions
	DeleteRegions *bool `json:"deleteRegions,omitempty" tf:"delete_regions,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Cloud networking details, per region, documented below
	// Cloud networking details, per region (multiple regions for Active-Active cluster)
	Region []ActiveSubscriptionRegionsRegionObservation `json:"region,omitempty" tf:"region,omitempty"`

	// ID of the subscription that the regions belong to. Modifying this attribute will force creation of a new resource.
	// ID of the subscription that the regions belong to
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`
}

type ActiveSubscriptionRegionsParameters struct {

	// Flag required to be set when one or more regions is to be deleted, if the flag is not set an error will be thrown
	// Delete regions flag has to be set for re-creating and deleting regions
	// +kubebuilder:validation:Optional
	DeleteRegions *bool `json:"deleteRegions,omitempty" tf:"delete_regions,omitempty"`

	// Cloud networking details, per region, documented below
	// Cloud networking details, per region (multiple regions for Active-Active cluster)
	// +kubebuilder:validation:Optional
	Region []ActiveSubscriptionRegionsRegionParameters `json:"region,omitempty" tf:"region,omitempty"`

	// ID of the subscription that the regions belong to. Modifying this attribute will force creation of a new resource.
	// ID of the subscription that the regions belong to
	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`
}

type ActiveSubscriptionRegionsRegionInitParameters struct {

	// A block defining the write and read operations in the region, per database, documented below
	// The database resource
	Database []DatabaseInitParameters `json:"database,omitempty" tf:"database,omitempty"`

	// Either 'resp2' or 'resp3'. Resp version for Crdb databases within this region. Must be compatible with Redis version.
	// The initial RESP version for all databases provisioned under this region.
	LocalRespVersion *string `json:"localRespVersion,omitempty" tf:"local_resp_version,omitempty"`

	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	// Deployment CIDR mask
	NetworkingDeploymentCidr *string `json:"networkingDeploymentCidr,omitempty" tf:"networking_deployment_cidr,omitempty"`

	// Protection flag, needs to be set if a region has to be re-created. A region will need to be re-created in the case of a change on the networking_deployment_cidr field. During re-create, the region will be deleted (so the delete_regions flag also needs to be set) and then created again. Default: 'false'
	// Defines whether the regions should be re-created
	RecreateRegion *bool `json:"recreateRegion,omitempty" tf:"recreate_region,omitempty"`

	// Region name
	// Deployment region as defined by cloud provider
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ActiveSubscriptionRegionsRegionObservation struct {

	// A block defining the write and read operations in the region, per database, documented below
	// The database resource
	Database []DatabaseObservation `json:"database,omitempty" tf:"database,omitempty"`

	// Either 'resp2' or 'resp3'. Resp version for Crdb databases within this region. Must be compatible with Redis version.
	// The initial RESP version for all databases provisioned under this region.
	LocalRespVersion *string `json:"localRespVersion,omitempty" tf:"local_resp_version,omitempty"`

	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	// Deployment CIDR mask
	NetworkingDeploymentCidr *string `json:"networkingDeploymentCidr,omitempty" tf:"networking_deployment_cidr,omitempty"`

	// Protection flag, needs to be set if a region has to be re-created. A region will need to be re-created in the case of a change on the networking_deployment_cidr field. During re-create, the region will be deleted (so the delete_regions flag also needs to be set) and then created again. Default: 'false'
	// Defines whether the regions should be re-created
	RecreateRegion *bool `json:"recreateRegion,omitempty" tf:"recreate_region,omitempty"`

	// Region name
	// Deployment region as defined by cloud provider
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (Computed) The ID of the region, as created by the API
	// The region id
	RegionID *float64 `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// (Computed) Identifier of the VPC to be peered, set by the API
	// Identifier of the VPC to be peered
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ActiveSubscriptionRegionsRegionParameters struct {

	// A block defining the write and read operations in the region, per database, documented below
	// The database resource
	// +kubebuilder:validation:Optional
	Database []DatabaseParameters `json:"database" tf:"database,omitempty"`

	// Either 'resp2' or 'resp3'. Resp version for Crdb databases within this region. Must be compatible with Redis version.
	// The initial RESP version for all databases provisioned under this region.
	// +kubebuilder:validation:Optional
	LocalRespVersion *string `json:"localRespVersion,omitempty" tf:"local_resp_version,omitempty"`

	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	// Deployment CIDR mask
	// +kubebuilder:validation:Optional
	NetworkingDeploymentCidr *string `json:"networkingDeploymentCidr" tf:"networking_deployment_cidr,omitempty"`

	// Protection flag, needs to be set if a region has to be re-created. A region will need to be re-created in the case of a change on the networking_deployment_cidr field. During re-create, the region will be deleted (so the delete_regions flag also needs to be set) and then created again. Default: 'false'
	// Defines whether the regions should be re-created
	// +kubebuilder:validation:Optional
	RecreateRegion *bool `json:"recreateRegion,omitempty" tf:"recreate_region,omitempty"`

	// Region name
	// Deployment region as defined by cloud provider
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`
}

type DatabaseInitParameters struct {

	// Database ID belonging to the subscription
	// A numeric id for the database
	DatabaseID *float64 `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	// Database name belonging to the subscription
	// A meaningful name to identify the database
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// Local read operations per second for this active-active region
	// Write operations per second for creation plan databases
	LocalReadOperationsPerSecond *float64 `json:"localReadOperationsPerSecond,omitempty" tf:"local_read_operations_per_second,omitempty"`

	// Local write operations per second for this active-active region
	// Write operations per second for creation plan databases
	LocalWriteOperationsPerSecond *float64 `json:"localWriteOperationsPerSecond,omitempty" tf:"local_write_operations_per_second,omitempty"`
}

type DatabaseObservation struct {

	// Database ID belonging to the subscription
	// A numeric id for the database
	DatabaseID *float64 `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	// Database name belonging to the subscription
	// A meaningful name to identify the database
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// Local read operations per second for this active-active region
	// Write operations per second for creation plan databases
	LocalReadOperationsPerSecond *float64 `json:"localReadOperationsPerSecond,omitempty" tf:"local_read_operations_per_second,omitempty"`

	// Local write operations per second for this active-active region
	// Write operations per second for creation plan databases
	LocalWriteOperationsPerSecond *float64 `json:"localWriteOperationsPerSecond,omitempty" tf:"local_write_operations_per_second,omitempty"`
}

type DatabaseParameters struct {

	// Database ID belonging to the subscription
	// A numeric id for the database
	// +kubebuilder:validation:Optional
	DatabaseID *float64 `json:"databaseId" tf:"database_id,omitempty"`

	// Database name belonging to the subscription
	// A meaningful name to identify the database
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName" tf:"database_name,omitempty"`

	// Local read operations per second for this active-active region
	// Write operations per second for creation plan databases
	// +kubebuilder:validation:Optional
	LocalReadOperationsPerSecond *float64 `json:"localReadOperationsPerSecond" tf:"local_read_operations_per_second,omitempty"`

	// Local write operations per second for this active-active region
	// Write operations per second for creation plan databases
	// +kubebuilder:validation:Optional
	LocalWriteOperationsPerSecond *float64 `json:"localWriteOperationsPerSecond" tf:"local_write_operations_per_second,omitempty"`
}

// ActiveSubscriptionRegionsSpec defines the desired state of ActiveSubscriptionRegions
type ActiveSubscriptionRegionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActiveSubscriptionRegionsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ActiveSubscriptionRegionsInitParameters `json:"initProvider,omitempty"`
}

// ActiveSubscriptionRegionsStatus defines the observed state of ActiveSubscriptionRegions.
type ActiveSubscriptionRegionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActiveSubscriptionRegionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ActiveSubscriptionRegions is the Schema for the ActiveSubscriptionRegionss API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rediscloud}
type ActiveSubscriptionRegions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscriptionId) || (has(self.initProvider) && has(self.initProvider.subscriptionId))",message="spec.forProvider.subscriptionId is a required parameter"
	Spec   ActiveSubscriptionRegionsSpec   `json:"spec"`
	Status ActiveSubscriptionRegionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActiveSubscriptionRegionsList contains a list of ActiveSubscriptionRegionss
type ActiveSubscriptionRegionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ActiveSubscriptionRegions `json:"items"`
}

// Repository type metadata.
var (
	ActiveSubscriptionRegions_Kind             = "ActiveSubscriptionRegions"
	ActiveSubscriptionRegions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ActiveSubscriptionRegions_Kind}.String()
	ActiveSubscriptionRegions_KindAPIVersion   = ActiveSubscriptionRegions_Kind + "." + CRDGroupVersion.String()
	ActiveSubscriptionRegions_GroupVersionKind = CRDGroupVersion.WithKind(ActiveSubscriptionRegions_Kind)
)

func init() {
	SchemeBuilder.Register(&ActiveSubscriptionRegions{}, &ActiveSubscriptionRegionsList{})
}
