// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this ActivePrivateServiceConnect.
func (mg *ActivePrivateServiceConnect) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ActivePrivateServiceConnect.
func (mg *ActivePrivateServiceConnect) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this ActivePrivateServiceConnect.
func (mg *ActivePrivateServiceConnect) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this ActivePrivateServiceConnect.
func (mg *ActivePrivateServiceConnect) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this ActivePrivateServiceConnect.
func (mg *ActivePrivateServiceConnect) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this ActivePrivateServiceConnect.
func (mg *ActivePrivateServiceConnect) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ActivePrivateServiceConnect.
func (mg *ActivePrivateServiceConnect) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ActivePrivateServiceConnect.
func (mg *ActivePrivateServiceConnect) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this ActivePrivateServiceConnect.
func (mg *ActivePrivateServiceConnect) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this ActivePrivateServiceConnect.
func (mg *ActivePrivateServiceConnect) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this ActivePrivateServiceConnect.
func (mg *ActivePrivateServiceConnect) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this ActivePrivateServiceConnect.
func (mg *ActivePrivateServiceConnect) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ActivePrivateServiceConnectEndpoint.
func (mg *ActivePrivateServiceConnectEndpoint) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ActivePrivateServiceConnectEndpoint.
func (mg *ActivePrivateServiceConnectEndpoint) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this ActivePrivateServiceConnectEndpoint.
func (mg *ActivePrivateServiceConnectEndpoint) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this ActivePrivateServiceConnectEndpoint.
func (mg *ActivePrivateServiceConnectEndpoint) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this ActivePrivateServiceConnectEndpoint.
func (mg *ActivePrivateServiceConnectEndpoint) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this ActivePrivateServiceConnectEndpoint.
func (mg *ActivePrivateServiceConnectEndpoint) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ActivePrivateServiceConnectEndpoint.
func (mg *ActivePrivateServiceConnectEndpoint) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ActivePrivateServiceConnectEndpoint.
func (mg *ActivePrivateServiceConnectEndpoint) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this ActivePrivateServiceConnectEndpoint.
func (mg *ActivePrivateServiceConnectEndpoint) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this ActivePrivateServiceConnectEndpoint.
func (mg *ActivePrivateServiceConnectEndpoint) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this ActivePrivateServiceConnectEndpoint.
func (mg *ActivePrivateServiceConnectEndpoint) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this ActivePrivateServiceConnectEndpoint.
func (mg *ActivePrivateServiceConnectEndpoint) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ActivePrivateServiceConnectEndpointAccepter.
func (mg *ActivePrivateServiceConnectEndpointAccepter) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ActivePrivateServiceConnectEndpointAccepter.
func (mg *ActivePrivateServiceConnectEndpointAccepter) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this ActivePrivateServiceConnectEndpointAccepter.
func (mg *ActivePrivateServiceConnectEndpointAccepter) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this ActivePrivateServiceConnectEndpointAccepter.
func (mg *ActivePrivateServiceConnectEndpointAccepter) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this ActivePrivateServiceConnectEndpointAccepter.
func (mg *ActivePrivateServiceConnectEndpointAccepter) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this ActivePrivateServiceConnectEndpointAccepter.
func (mg *ActivePrivateServiceConnectEndpointAccepter) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ActivePrivateServiceConnectEndpointAccepter.
func (mg *ActivePrivateServiceConnectEndpointAccepter) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ActivePrivateServiceConnectEndpointAccepter.
func (mg *ActivePrivateServiceConnectEndpointAccepter) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this ActivePrivateServiceConnectEndpointAccepter.
func (mg *ActivePrivateServiceConnectEndpointAccepter) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this ActivePrivateServiceConnectEndpointAccepter.
func (mg *ActivePrivateServiceConnectEndpointAccepter) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this ActivePrivateServiceConnectEndpointAccepter.
func (mg *ActivePrivateServiceConnectEndpointAccepter) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this ActivePrivateServiceConnectEndpointAccepter.
func (mg *ActivePrivateServiceConnectEndpointAccepter) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ActiveSubscription.
func (mg *ActiveSubscription) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ActiveSubscription.
func (mg *ActiveSubscription) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this ActiveSubscription.
func (mg *ActiveSubscription) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this ActiveSubscription.
func (mg *ActiveSubscription) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this ActiveSubscription.
func (mg *ActiveSubscription) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this ActiveSubscription.
func (mg *ActiveSubscription) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ActiveSubscription.
func (mg *ActiveSubscription) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ActiveSubscription.
func (mg *ActiveSubscription) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this ActiveSubscription.
func (mg *ActiveSubscription) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this ActiveSubscription.
func (mg *ActiveSubscription) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this ActiveSubscription.
func (mg *ActiveSubscription) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this ActiveSubscription.
func (mg *ActiveSubscription) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ActiveSubscriptionDatabase.
func (mg *ActiveSubscriptionDatabase) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ActiveSubscriptionDatabase.
func (mg *ActiveSubscriptionDatabase) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this ActiveSubscriptionDatabase.
func (mg *ActiveSubscriptionDatabase) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this ActiveSubscriptionDatabase.
func (mg *ActiveSubscriptionDatabase) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this ActiveSubscriptionDatabase.
func (mg *ActiveSubscriptionDatabase) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this ActiveSubscriptionDatabase.
func (mg *ActiveSubscriptionDatabase) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ActiveSubscriptionDatabase.
func (mg *ActiveSubscriptionDatabase) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ActiveSubscriptionDatabase.
func (mg *ActiveSubscriptionDatabase) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this ActiveSubscriptionDatabase.
func (mg *ActiveSubscriptionDatabase) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this ActiveSubscriptionDatabase.
func (mg *ActiveSubscriptionDatabase) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this ActiveSubscriptionDatabase.
func (mg *ActiveSubscriptionDatabase) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this ActiveSubscriptionDatabase.
func (mg *ActiveSubscriptionDatabase) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ActiveSubscriptionPeering.
func (mg *ActiveSubscriptionPeering) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ActiveSubscriptionPeering.
func (mg *ActiveSubscriptionPeering) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this ActiveSubscriptionPeering.
func (mg *ActiveSubscriptionPeering) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this ActiveSubscriptionPeering.
func (mg *ActiveSubscriptionPeering) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this ActiveSubscriptionPeering.
func (mg *ActiveSubscriptionPeering) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this ActiveSubscriptionPeering.
func (mg *ActiveSubscriptionPeering) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ActiveSubscriptionPeering.
func (mg *ActiveSubscriptionPeering) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ActiveSubscriptionPeering.
func (mg *ActiveSubscriptionPeering) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this ActiveSubscriptionPeering.
func (mg *ActiveSubscriptionPeering) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this ActiveSubscriptionPeering.
func (mg *ActiveSubscriptionPeering) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this ActiveSubscriptionPeering.
func (mg *ActiveSubscriptionPeering) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this ActiveSubscriptionPeering.
func (mg *ActiveSubscriptionPeering) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ActiveSubscriptionRegions.
func (mg *ActiveSubscriptionRegions) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ActiveSubscriptionRegions.
func (mg *ActiveSubscriptionRegions) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this ActiveSubscriptionRegions.
func (mg *ActiveSubscriptionRegions) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this ActiveSubscriptionRegions.
func (mg *ActiveSubscriptionRegions) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this ActiveSubscriptionRegions.
func (mg *ActiveSubscriptionRegions) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this ActiveSubscriptionRegions.
func (mg *ActiveSubscriptionRegions) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ActiveSubscriptionRegions.
func (mg *ActiveSubscriptionRegions) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ActiveSubscriptionRegions.
func (mg *ActiveSubscriptionRegions) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this ActiveSubscriptionRegions.
func (mg *ActiveSubscriptionRegions) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this ActiveSubscriptionRegions.
func (mg *ActiveSubscriptionRegions) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this ActiveSubscriptionRegions.
func (mg *ActiveSubscriptionRegions) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this ActiveSubscriptionRegions.
func (mg *ActiveSubscriptionRegions) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ActiveTransitGatewayAttachment.
func (mg *ActiveTransitGatewayAttachment) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ActiveTransitGatewayAttachment.
func (mg *ActiveTransitGatewayAttachment) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicies of this ActiveTransitGatewayAttachment.
func (mg *ActiveTransitGatewayAttachment) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this ActiveTransitGatewayAttachment.
func (mg *ActiveTransitGatewayAttachment) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

// GetPublishConnectionDetailsTo of this ActiveTransitGatewayAttachment.
func (mg *ActiveTransitGatewayAttachment) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this ActiveTransitGatewayAttachment.
func (mg *ActiveTransitGatewayAttachment) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ActiveTransitGatewayAttachment.
func (mg *ActiveTransitGatewayAttachment) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ActiveTransitGatewayAttachment.
func (mg *ActiveTransitGatewayAttachment) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicies of this ActiveTransitGatewayAttachment.
func (mg *ActiveTransitGatewayAttachment) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this ActiveTransitGatewayAttachment.
func (mg *ActiveTransitGatewayAttachment) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

// SetPublishConnectionDetailsTo of this ActiveTransitGatewayAttachment.
func (mg *ActiveTransitGatewayAttachment) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this ActiveTransitGatewayAttachment.
func (mg *ActiveTransitGatewayAttachment) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
