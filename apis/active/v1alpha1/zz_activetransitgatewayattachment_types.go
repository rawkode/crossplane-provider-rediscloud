// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActiveTransitGatewayAttachmentInitParameters struct {

	// A list of consumer Cidr blocks. May only be added once the Attachment has been accepted
	// A list of consumer Cidr blocks.
	Cidrs []*string `json:"cidrs,omitempty" tf:"cidrs,omitempty"`

	// The id of the AWS region
	// The id of the AWS region
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// The id of the Pro/Flexible subscription to attach
	// The id of the Pro/Flexible subscription to attach
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// The id of the Transit Gateway to attach to
	// The id of the Transit Gateway to attach to
	TgwID *float64 `json:"tgwId,omitempty" tf:"tgw_id,omitempty"`
}

type ActiveTransitGatewayAttachmentObservation struct {

	// The status of the Subscription/Transit Gateway attachment, if established
	// The status of the Subscription/Transit Gateway attachment, if established
	AttachmentStatus *string `json:"attachmentStatus,omitempty" tf:"attachment_status,omitempty"`

	// A unique identifier for the Subscription/Transit Gateway attachment, if established
	// A unique identifier for the Subscription/Transit Gateway attachment, if established
	AttachmentUID *string `json:"attachmentUid,omitempty" tf:"attachment_uid,omitempty"`

	// The Transit Gateway's AWS account id
	// The Transit Gateway's AWS account id
	AwsAccountID *string `json:"awsAccountId,omitempty" tf:"aws_account_id,omitempty"`

	// The id of the Transit Gateway as known to AWS
	// The id of the Transit Gateway as known to AWS
	AwsTgwUID *string `json:"awsTgwUid,omitempty" tf:"aws_tgw_uid,omitempty"`

	// A list of consumer Cidr blocks. May only be added once the Attachment has been accepted
	// A list of consumer Cidr blocks.
	Cidrs []*string `json:"cidrs,omitempty" tf:"cidrs,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The id of the AWS region
	// The id of the AWS region
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// The status of the Transit Gateway
	// The status of the Transit Gateway
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The id of the Pro/Flexible subscription to attach
	// The id of the Pro/Flexible subscription to attach
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// The id of the Transit Gateway to attach to
	// The id of the Transit Gateway to attach to
	TgwID *float64 `json:"tgwId,omitempty" tf:"tgw_id,omitempty"`
}

type ActiveTransitGatewayAttachmentParameters struct {

	// A list of consumer Cidr blocks. May only be added once the Attachment has been accepted
	// A list of consumer Cidr blocks.
	// +kubebuilder:validation:Optional
	Cidrs []*string `json:"cidrs,omitempty" tf:"cidrs,omitempty"`

	// The id of the AWS region
	// The id of the AWS region
	// +kubebuilder:validation:Optional
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// The id of the Pro/Flexible subscription to attach
	// The id of the Pro/Flexible subscription to attach
	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// The id of the Transit Gateway to attach to
	// The id of the Transit Gateway to attach to
	// +kubebuilder:validation:Optional
	TgwID *float64 `json:"tgwId,omitempty" tf:"tgw_id,omitempty"`
}

// ActiveTransitGatewayAttachmentSpec defines the desired state of ActiveTransitGatewayAttachment
type ActiveTransitGatewayAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActiveTransitGatewayAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ActiveTransitGatewayAttachmentInitParameters `json:"initProvider,omitempty"`
}

// ActiveTransitGatewayAttachmentStatus defines the observed state of ActiveTransitGatewayAttachment.
type ActiveTransitGatewayAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActiveTransitGatewayAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ActiveTransitGatewayAttachment is the Schema for the ActiveTransitGatewayAttachments API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rediscloud}
type ActiveTransitGatewayAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.regionId) || (has(self.initProvider) && has(self.initProvider.regionId))",message="spec.forProvider.regionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscriptionId) || (has(self.initProvider) && has(self.initProvider.subscriptionId))",message="spec.forProvider.subscriptionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tgwId) || (has(self.initProvider) && has(self.initProvider.tgwId))",message="spec.forProvider.tgwId is a required parameter"
	Spec   ActiveTransitGatewayAttachmentSpec   `json:"spec"`
	Status ActiveTransitGatewayAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActiveTransitGatewayAttachmentList contains a list of ActiveTransitGatewayAttachments
type ActiveTransitGatewayAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ActiveTransitGatewayAttachment `json:"items"`
}

// Repository type metadata.
var (
	ActiveTransitGatewayAttachment_Kind             = "ActiveTransitGatewayAttachment"
	ActiveTransitGatewayAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ActiveTransitGatewayAttachment_Kind}.String()
	ActiveTransitGatewayAttachment_KindAPIVersion   = ActiveTransitGatewayAttachment_Kind + "." + CRDGroupVersion.String()
	ActiveTransitGatewayAttachment_GroupVersionKind = CRDGroupVersion.WithKind(ActiveTransitGatewayAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&ActiveTransitGatewayAttachment{}, &ActiveTransitGatewayAttachmentList{})
}
