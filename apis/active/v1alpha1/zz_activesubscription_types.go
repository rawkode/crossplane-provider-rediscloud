// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActiveSubscriptionInitParameters struct {

	// The cloud provider to use with the subscription, (either AWS or GCP). Default: ‘AWS’. Modifying this attribute will force creation of a new resource.
	// A cloud provider string either GCP or AWS
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// A creation plan object, documented below. Ignored after creation.
	// Information about the planned databases used to optimise the database infrastructure. This information is only used when creating a new subscription and any changes will be ignored after this.
	CreationPlan []CreationPlanInitParameters `json:"creationPlan,omitempty" tf:"creation_plan,omitempty"`

	// The subscription's maintenance window specification, documented below.
	// Specify the subscription's maintenance windows
	MaintenanceWindows []MaintenanceWindowsInitParameters `json:"maintenanceWindows,omitempty" tf:"maintenance_windows,omitempty"`

	// A meaningful name to identify the subscription
	// A meaningful name to identify the subscription
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// card or marketplace). If credit-card is specified, payment_method_id must be defined. Default: 'credit-card'. (Changes to) this attribute are ignored after creation.
	// Payment method for the requested subscription. If credit card is specified, the payment method id must be defined. This information is only used when creating a new subscription and any changes will be ignored after this.
	PaymentMethod *string `json:"paymentMethod,omitempty" tf:"payment_method,omitempty"`

	// A valid payment method pre-defined in the current account. This value is Optional for AWS/GCP Marketplace accounts, but Required for all other account types
	// A valid payment method pre-defined in the current account
	PaymentMethodID *string `json:"paymentMethodId,omitempty" tf:"payment_method_id,omitempty"`

	// The Redis version of the databases in the subscription. If omitted, the Redis version will be the default. Modifying this attribute will force creation of a new resource.
	// Version of Redis to create
	RedisVersion *string `json:"redisVersion,omitempty" tf:"redis_version,omitempty"`
}

type ActiveSubscriptionObservation struct {

	// The cloud provider to use with the subscription, (either AWS or GCP). Default: ‘AWS’. Modifying this attribute will force creation of a new resource.
	// A cloud provider string either GCP or AWS
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// A creation plan object, documented below. Ignored after creation.
	// Information about the planned databases used to optimise the database infrastructure. This information is only used when creating a new subscription and any changes will be ignored after this.
	CreationPlan []CreationPlanObservation `json:"creationPlan,omitempty" tf:"creation_plan,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The subscription's maintenance window specification, documented below.
	// Specify the subscription's maintenance windows
	MaintenanceWindows []MaintenanceWindowsObservation `json:"maintenanceWindows,omitempty" tf:"maintenance_windows,omitempty"`

	// A meaningful name to identify the subscription
	// A meaningful name to identify the subscription
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// card or marketplace). If credit-card is specified, payment_method_id must be defined. Default: 'credit-card'. (Changes to) this attribute are ignored after creation.
	// Payment method for the requested subscription. If credit card is specified, the payment method id must be defined. This information is only used when creating a new subscription and any changes will be ignored after this.
	PaymentMethod *string `json:"paymentMethod,omitempty" tf:"payment_method,omitempty"`

	// A valid payment method pre-defined in the current account. This value is Optional for AWS/GCP Marketplace accounts, but Required for all other account types
	// A valid payment method pre-defined in the current account
	PaymentMethodID *string `json:"paymentMethodId,omitempty" tf:"payment_method_id,omitempty"`

	// A list of pricing objects, documented below
	// Pricing details totalled over this Subscription
	Pricing []PricingObservation `json:"pricing,omitempty" tf:"pricing,omitempty"`

	// The Redis version of the databases in the subscription. If omitted, the Redis version will be the default. Modifying this attribute will force creation of a new resource.
	// Version of Redis to create
	RedisVersion *string `json:"redisVersion,omitempty" tf:"redis_version,omitempty"`
}

type ActiveSubscriptionParameters struct {

	// The cloud provider to use with the subscription, (either AWS or GCP). Default: ‘AWS’. Modifying this attribute will force creation of a new resource.
	// A cloud provider string either GCP or AWS
	// +kubebuilder:validation:Optional
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// A creation plan object, documented below. Ignored after creation.
	// Information about the planned databases used to optimise the database infrastructure. This information is only used when creating a new subscription and any changes will be ignored after this.
	// +kubebuilder:validation:Optional
	CreationPlan []CreationPlanParameters `json:"creationPlan,omitempty" tf:"creation_plan,omitempty"`

	// The subscription's maintenance window specification, documented below.
	// Specify the subscription's maintenance windows
	// +kubebuilder:validation:Optional
	MaintenanceWindows []MaintenanceWindowsParameters `json:"maintenanceWindows,omitempty" tf:"maintenance_windows,omitempty"`

	// A meaningful name to identify the subscription
	// A meaningful name to identify the subscription
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// card or marketplace). If credit-card is specified, payment_method_id must be defined. Default: 'credit-card'. (Changes to) this attribute are ignored after creation.
	// Payment method for the requested subscription. If credit card is specified, the payment method id must be defined. This information is only used when creating a new subscription and any changes will be ignored after this.
	// +kubebuilder:validation:Optional
	PaymentMethod *string `json:"paymentMethod,omitempty" tf:"payment_method,omitempty"`

	// A valid payment method pre-defined in the current account. This value is Optional for AWS/GCP Marketplace accounts, but Required for all other account types
	// A valid payment method pre-defined in the current account
	// +kubebuilder:validation:Optional
	PaymentMethodID *string `json:"paymentMethodId,omitempty" tf:"payment_method_id,omitempty"`

	// The Redis version of the databases in the subscription. If omitted, the Redis version will be the default. Modifying this attribute will force creation of a new resource.
	// Version of Redis to create
	// +kubebuilder:validation:Optional
	RedisVersion *string `json:"redisVersion,omitempty" tf:"redis_version,omitempty"`
}

type CreationPlanInitParameters struct {

	// is unset
	// Maximum amount of data in the dataset for this specific database in GB
	DatasetSizeInGb *float64 `json:"datasetSizeInGb,omitempty" tf:"dataset_size_in_gb,omitempty"`

	// Maximum memory usage for this specific database, including replication and other overhead Deprecated in favor of
	// (Deprecated) Maximum memory usage for this specific database
	MemoryLimitInGb *float64 `json:"memoryLimitInGb,omitempty" tf:"memory_limit_in_gb,omitempty"`

	// A list of modules to be enabled on all deployments of this database. Either: RedisJSON or RediSearch.
	// Modules that will be used by the databases in this subscription.
	Modules []*string `json:"modules,omitempty" tf:"modules,omitempty"`

	// The planned number of databases in the subscription.
	// The planned number of databases
	Quantity *float64 `json:"quantity,omitempty" tf:"quantity,omitempty"`

	// Deployment region block, documented below
	// Cloud networking details, per region (multiple regions for Active-Active cluster)
	Region []RegionInitParameters `json:"region,omitempty" tf:"region,omitempty"`
}

type CreationPlanObservation struct {

	// is unset
	// Maximum amount of data in the dataset for this specific database in GB
	DatasetSizeInGb *float64 `json:"datasetSizeInGb,omitempty" tf:"dataset_size_in_gb,omitempty"`

	// Maximum memory usage for this specific database, including replication and other overhead Deprecated in favor of
	// (Deprecated) Maximum memory usage for this specific database
	MemoryLimitInGb *float64 `json:"memoryLimitInGb,omitempty" tf:"memory_limit_in_gb,omitempty"`

	// A list of modules to be enabled on all deployments of this database. Either: RedisJSON or RediSearch.
	// Modules that will be used by the databases in this subscription.
	Modules []*string `json:"modules,omitempty" tf:"modules,omitempty"`

	// The planned number of databases in the subscription.
	// The planned number of databases
	Quantity *float64 `json:"quantity,omitempty" tf:"quantity,omitempty"`

	// Deployment region block, documented below
	// Cloud networking details, per region (multiple regions for Active-Active cluster)
	Region []RegionObservation `json:"region,omitempty" tf:"region,omitempty"`
}

type CreationPlanParameters struct {

	// is unset
	// Maximum amount of data in the dataset for this specific database in GB
	// +kubebuilder:validation:Optional
	DatasetSizeInGb *float64 `json:"datasetSizeInGb,omitempty" tf:"dataset_size_in_gb,omitempty"`

	// Maximum memory usage for this specific database, including replication and other overhead Deprecated in favor of
	// (Deprecated) Maximum memory usage for this specific database
	// +kubebuilder:validation:Optional
	MemoryLimitInGb *float64 `json:"memoryLimitInGb,omitempty" tf:"memory_limit_in_gb,omitempty"`

	// A list of modules to be enabled on all deployments of this database. Either: RedisJSON or RediSearch.
	// Modules that will be used by the databases in this subscription.
	// +kubebuilder:validation:Optional
	Modules []*string `json:"modules,omitempty" tf:"modules,omitempty"`

	// The planned number of databases in the subscription.
	// The planned number of databases
	// +kubebuilder:validation:Optional
	Quantity *float64 `json:"quantity" tf:"quantity,omitempty"`

	// Deployment region block, documented below
	// Cloud networking details, per region (multiple regions for Active-Active cluster)
	// +kubebuilder:validation:Optional
	Region []RegionParameters `json:"region" tf:"region,omitempty"`
}

type MaintenanceWindowsInitParameters struct {

	// Either automatic (Redis specified) or manual (User specified)
	// Either automatic (Redis specified) or manual (User specified)
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// A list of windows (if manual mode)
	// A list of maintenance windows for manual-mode
	Window []WindowInitParameters `json:"window,omitempty" tf:"window,omitempty"`
}

type MaintenanceWindowsObservation struct {

	// Either automatic (Redis specified) or manual (User specified)
	// Either automatic (Redis specified) or manual (User specified)
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// A list of windows (if manual mode)
	// A list of maintenance windows for manual-mode
	Window []WindowObservation `json:"window,omitempty" tf:"window,omitempty"`
}

type MaintenanceWindowsParameters struct {

	// Either automatic (Redis specified) or manual (User specified)
	// Either automatic (Redis specified) or manual (User specified)
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// A list of windows (if manual mode)
	// A list of maintenance windows for manual-mode
	// +kubebuilder:validation:Optional
	Window []WindowParameters `json:"window,omitempty" tf:"window,omitempty"`
}

type PricingInitParameters struct {
}

type PricingObservation struct {

	// A meaningful name to identify the subscription
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	PriceCurrency *string `json:"priceCurrency,omitempty" tf:"price_currency,omitempty"`

	PricePerUnit *float64 `json:"pricePerUnit,omitempty" tf:"price_per_unit,omitempty"`

	PricePeriod *string `json:"pricePeriod,omitempty" tf:"price_period,omitempty"`

	// Self-explanatory.
	Quantity *float64 `json:"quantity,omitempty" tf:"quantity,omitempty"`

	QuantityMeasurement *string `json:"quantityMeasurement,omitempty" tf:"quantity_measurement,omitempty"`

	// Specify if the cost is associated with a particular region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The type of cost. E.g. 'Shards'.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	TypeDetails *string `json:"typeDetails,omitempty" tf:"type_details,omitempty"`
}

type PricingParameters struct {
}

type RegionInitParameters struct {

	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	// Deployment CIDR mask
	NetworkingDeploymentCidr *string `json:"networkingDeploymentCidr,omitempty" tf:"networking_deployment_cidr,omitempty"`

	// Throughput measurement for an active-active subscription
	// Write operations per second for creation plan databases
	ReadOperationsPerSecond *float64 `json:"readOperationsPerSecond,omitempty" tf:"read_operations_per_second,omitempty"`

	// Deployment region as defined by the cloud provider
	// Deployment region as defined by cloud provider
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Throughput measurement for an active-active subscription
	// Write operations per second for creation plan databases
	WriteOperationsPerSecond *float64 `json:"writeOperationsPerSecond,omitempty" tf:"write_operations_per_second,omitempty"`
}

type RegionObservation struct {

	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	// Deployment CIDR mask
	NetworkingDeploymentCidr *string `json:"networkingDeploymentCidr,omitempty" tf:"networking_deployment_cidr,omitempty"`

	// Throughput measurement for an active-active subscription
	// Write operations per second for creation plan databases
	ReadOperationsPerSecond *float64 `json:"readOperationsPerSecond,omitempty" tf:"read_operations_per_second,omitempty"`

	// Deployment region as defined by the cloud provider
	// Deployment region as defined by cloud provider
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Throughput measurement for an active-active subscription
	// Write operations per second for creation plan databases
	WriteOperationsPerSecond *float64 `json:"writeOperationsPerSecond,omitempty" tf:"write_operations_per_second,omitempty"`
}

type RegionParameters struct {

	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	// Deployment CIDR mask
	// +kubebuilder:validation:Optional
	NetworkingDeploymentCidr *string `json:"networkingDeploymentCidr" tf:"networking_deployment_cidr,omitempty"`

	// Throughput measurement for an active-active subscription
	// Write operations per second for creation plan databases
	// +kubebuilder:validation:Optional
	ReadOperationsPerSecond *float64 `json:"readOperationsPerSecond" tf:"read_operations_per_second,omitempty"`

	// Deployment region as defined by the cloud provider
	// Deployment region as defined by cloud provider
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`

	// Throughput measurement for an active-active subscription
	// Write operations per second for creation plan databases
	// +kubebuilder:validation:Optional
	WriteOperationsPerSecond *float64 `json:"writeOperationsPerSecond" tf:"write_operations_per_second,omitempty"`
}

type WindowInitParameters struct {

	// A list of weekdays on which the window is open ('Monday', 'Tuesday' etc)
	// A list of days on which the window is open ('Monday', 'Tuesday' etc)
	Days []*string `json:"days,omitempty" tf:"days,omitempty"`

	// How long the window is open (4-24 hours)
	// How long maintenance may take
	DurationInHours *float64 `json:"durationInHours,omitempty" tf:"duration_in_hours,omitempty"`

	// What hour in the day (0-23) the window opens
	// What hour in the day (0-23) may maintenance start
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`
}

type WindowObservation struct {

	// A list of weekdays on which the window is open ('Monday', 'Tuesday' etc)
	// A list of days on which the window is open ('Monday', 'Tuesday' etc)
	Days []*string `json:"days,omitempty" tf:"days,omitempty"`

	// How long the window is open (4-24 hours)
	// How long maintenance may take
	DurationInHours *float64 `json:"durationInHours,omitempty" tf:"duration_in_hours,omitempty"`

	// What hour in the day (0-23) the window opens
	// What hour in the day (0-23) may maintenance start
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`
}

type WindowParameters struct {

	// A list of weekdays on which the window is open ('Monday', 'Tuesday' etc)
	// A list of days on which the window is open ('Monday', 'Tuesday' etc)
	// +kubebuilder:validation:Optional
	Days []*string `json:"days" tf:"days,omitempty"`

	// How long the window is open (4-24 hours)
	// How long maintenance may take
	// +kubebuilder:validation:Optional
	DurationInHours *float64 `json:"durationInHours" tf:"duration_in_hours,omitempty"`

	// What hour in the day (0-23) the window opens
	// What hour in the day (0-23) may maintenance start
	// +kubebuilder:validation:Optional
	StartHour *float64 `json:"startHour" tf:"start_hour,omitempty"`
}

// ActiveSubscriptionSpec defines the desired state of ActiveSubscription
type ActiveSubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActiveSubscriptionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ActiveSubscriptionInitParameters `json:"initProvider,omitempty"`
}

// ActiveSubscriptionStatus defines the observed state of ActiveSubscription.
type ActiveSubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActiveSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ActiveSubscription is the Schema for the ActiveSubscriptions API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rediscloud}
type ActiveSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ActiveSubscriptionSpec   `json:"spec"`
	Status            ActiveSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActiveSubscriptionList contains a list of ActiveSubscriptions
type ActiveSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ActiveSubscription `json:"items"`
}

// Repository type metadata.
var (
	ActiveSubscription_Kind             = "ActiveSubscription"
	ActiveSubscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ActiveSubscription_Kind}.String()
	ActiveSubscription_KindAPIVersion   = ActiveSubscription_Kind + "." + CRDGroupVersion.String()
	ActiveSubscription_GroupVersionKind = CRDGroupVersion.WithKind(ActiveSubscription_Kind)
)

func init() {
	SchemeBuilder.Register(&ActiveSubscription{}, &ActiveSubscriptionList{})
}
