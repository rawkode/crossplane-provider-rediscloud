// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceAttachmentsInitParameters struct {
}

type ServiceAttachmentsObservation struct {
	DNSRecord *string `json:"dnsRecord,omitempty" tf:"dns_record,omitempty"`

	ForwardingRuleName *string `json:"forwardingRuleName,omitempty" tf:"forwarding_rule_name,omitempty"`

	IPAddressName *string `json:"ipAddressName,omitempty" tf:"ip_address_name,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ServiceAttachmentsParameters struct {
}

type ServiceConnectEndpointInitParameters struct {

	// The endpoint connection name prefix. This prefix that will be used to create the Private Service Connect endpoint in your Google Cloud account
	EndpointConnectionName *string `json:"endpointConnectionName,omitempty" tf:"endpoint_connection_name,omitempty"`

	// The Google Cloud Project ID
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// The GCP VPC Network name
	GCPVPCName *string `json:"gcpVpcName,omitempty" tf:"gcp_vpc_name,omitempty"`

	// The GCP Subnet name
	GCPVPCSubnetName *string `json:"gcpVpcSubnetName,omitempty" tf:"gcp_vpc_subnet_name,omitempty"`

	// The ID of the Private Service Connect
	PrivateServiceConnectServiceID *float64 `json:"privateServiceConnectServiceId,omitempty" tf:"private_service_connect_service_id,omitempty"`

	// The ID of the Pro subscription to attach
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`
}

type ServiceConnectEndpointObservation struct {

	// The endpoint connection name prefix. This prefix that will be used to create the Private Service Connect endpoint in your Google Cloud account
	EndpointConnectionName *string `json:"endpointConnectionName,omitempty" tf:"endpoint_connection_name,omitempty"`

	// The Google Cloud Project ID
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// The GCP VPC Network name
	GCPVPCName *string `json:"gcpVpcName,omitempty" tf:"gcp_vpc_name,omitempty"`

	// The GCP Subnet name
	GCPVPCSubnetName *string `json:"gcpVpcSubnetName,omitempty" tf:"gcp_vpc_subnet_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the Private Service Connect Endpoint
	PrivateServiceConnectEndpointID *float64 `json:"privateServiceConnectEndpointId,omitempty" tf:"private_service_connect_endpoint_id,omitempty"`

	// The ID of the Private Service Connect
	PrivateServiceConnectServiceID *float64 `json:"privateServiceConnectServiceId,omitempty" tf:"private_service_connect_service_id,omitempty"`

	// The service attachments that were created for the Private Service Connect endpoint
	ServiceAttachments []ServiceAttachmentsObservation `json:"serviceAttachments,omitempty" tf:"service_attachments,omitempty"`

	// The ID of the Pro subscription to attach
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`
}

type ServiceConnectEndpointParameters struct {

	// The endpoint connection name prefix. This prefix that will be used to create the Private Service Connect endpoint in your Google Cloud account
	// +kubebuilder:validation:Optional
	EndpointConnectionName *string `json:"endpointConnectionName,omitempty" tf:"endpoint_connection_name,omitempty"`

	// The Google Cloud Project ID
	// +kubebuilder:validation:Optional
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// The GCP VPC Network name
	// +kubebuilder:validation:Optional
	GCPVPCName *string `json:"gcpVpcName,omitempty" tf:"gcp_vpc_name,omitempty"`

	// The GCP Subnet name
	// +kubebuilder:validation:Optional
	GCPVPCSubnetName *string `json:"gcpVpcSubnetName,omitempty" tf:"gcp_vpc_subnet_name,omitempty"`

	// The ID of the Private Service Connect
	// +kubebuilder:validation:Optional
	PrivateServiceConnectServiceID *float64 `json:"privateServiceConnectServiceId,omitempty" tf:"private_service_connect_service_id,omitempty"`

	// The ID of the Pro subscription to attach
	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`
}

// ServiceConnectEndpointSpec defines the desired state of ServiceConnectEndpoint
type ServiceConnectEndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceConnectEndpointParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceConnectEndpointInitParameters `json:"initProvider,omitempty"`
}

// ServiceConnectEndpointStatus defines the observed state of ServiceConnectEndpoint.
type ServiceConnectEndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceConnectEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceConnectEndpoint is the Schema for the ServiceConnectEndpoints API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rediscloud}
type ServiceConnectEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpointConnectionName) || (has(self.initProvider) && has(self.initProvider.endpointConnectionName))",message="spec.forProvider.endpointConnectionName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gcpProjectId) || (has(self.initProvider) && has(self.initProvider.gcpProjectId))",message="spec.forProvider.gcpProjectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gcpVpcName) || (has(self.initProvider) && has(self.initProvider.gcpVpcName))",message="spec.forProvider.gcpVpcName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gcpVpcSubnetName) || (has(self.initProvider) && has(self.initProvider.gcpVpcSubnetName))",message="spec.forProvider.gcpVpcSubnetName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privateServiceConnectServiceId) || (has(self.initProvider) && has(self.initProvider.privateServiceConnectServiceId))",message="spec.forProvider.privateServiceConnectServiceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscriptionId) || (has(self.initProvider) && has(self.initProvider.subscriptionId))",message="spec.forProvider.subscriptionId is a required parameter"
	Spec   ServiceConnectEndpointSpec   `json:"spec"`
	Status ServiceConnectEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceConnectEndpointList contains a list of ServiceConnectEndpoints
type ServiceConnectEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceConnectEndpoint `json:"items"`
}

// Repository type metadata.
var (
	ServiceConnectEndpoint_Kind             = "ServiceConnectEndpoint"
	ServiceConnectEndpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceConnectEndpoint_Kind}.String()
	ServiceConnectEndpoint_KindAPIVersion   = ServiceConnectEndpoint_Kind + "." + CRDGroupVersion.String()
	ServiceConnectEndpoint_GroupVersionKind = CRDGroupVersion.WithKind(ServiceConnectEndpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceConnectEndpoint{}, &ServiceConnectEndpointList{})
}
