// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllowlistInitParameters struct {

	// Set of CIDR ranges that are allowed to access the databases associated with this subscription
	// Set of CIDR ranges that are allowed to access the databases associated with this subscription
	// +listType=set
	Cidrs []*string `json:"cidrs,omitempty" tf:"cidrs,omitempty"`

	// Set of security groups that are allowed to access the databases associated with this subscription
	// Set of security groups that are allowed to access the databases associated with this subscription
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`
}

type AllowlistObservation struct {

	// Set of CIDR ranges that are allowed to access the databases associated with this subscription
	// Set of CIDR ranges that are allowed to access the databases associated with this subscription
	// +listType=set
	Cidrs []*string `json:"cidrs,omitempty" tf:"cidrs,omitempty"`

	// Set of security groups that are allowed to access the databases associated with this subscription
	// Set of security groups that are allowed to access the databases associated with this subscription
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`
}

type AllowlistParameters struct {

	// Set of CIDR ranges that are allowed to access the databases associated with this subscription
	// Set of CIDR ranges that are allowed to access the databases associated with this subscription
	// +kubebuilder:validation:Optional
	// +listType=set
	Cidrs []*string `json:"cidrs,omitempty" tf:"cidrs,omitempty"`

	// Set of security groups that are allowed to access the databases associated with this subscription
	// Set of security groups that are allowed to access the databases associated with this subscription
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds" tf:"security_group_ids,omitempty"`
}

type CloudProviderInitParameters struct {

	// Cloud account identifier. Default: Redis Labs internal cloud account. Modifying this attribute will force creation of a new resource.
	// (using Cloud Account ID = 1 implies using Redis Labs internal cloud account). Note that a GCP subscription can be created
	// only with Redis Labs internal cloud account
	// Cloud account identifier. Default: Redis Labs internal cloud account (using Cloud Account Id = 1 implies using Redis Labs internal cloud account). Note that a GCP subscription can be created only with Redis Labs internal cloud account
	CloudAccountID *string `json:"cloudAccountId,omitempty" tf:"cloud_account_id,omitempty"`

	// The cloud provider to use with the subscription, (either AWS or GCP). Default: ‘AWS’. Modifying this attribute will force creation of a new resource.
	// The cloud provider to use with the subscription, (either `AWS` or `GCP`)
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// A region object, documented below. Modifying this attribute will force creation of a new resource.
	// Cloud networking details, per region (single region or multiple regions for Active-Active cluster only)
	Region []RegionInitParameters `json:"region,omitempty" tf:"region,omitempty"`
}

type CloudProviderObservation struct {

	// Cloud account identifier. Default: Redis Labs internal cloud account. Modifying this attribute will force creation of a new resource.
	// (using Cloud Account ID = 1 implies using Redis Labs internal cloud account). Note that a GCP subscription can be created
	// only with Redis Labs internal cloud account
	// Cloud account identifier. Default: Redis Labs internal cloud account (using Cloud Account Id = 1 implies using Redis Labs internal cloud account). Note that a GCP subscription can be created only with Redis Labs internal cloud account
	CloudAccountID *string `json:"cloudAccountId,omitempty" tf:"cloud_account_id,omitempty"`

	// The cloud provider to use with the subscription, (either AWS or GCP). Default: ‘AWS’. Modifying this attribute will force creation of a new resource.
	// The cloud provider to use with the subscription, (either `AWS` or `GCP`)
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// A region object, documented below. Modifying this attribute will force creation of a new resource.
	// Cloud networking details, per region (single region or multiple regions for Active-Active cluster only)
	Region []RegionObservation `json:"region,omitempty" tf:"region,omitempty"`
}

type CloudProviderParameters struct {

	// Cloud account identifier. Default: Redis Labs internal cloud account. Modifying this attribute will force creation of a new resource.
	// (using Cloud Account ID = 1 implies using Redis Labs internal cloud account). Note that a GCP subscription can be created
	// only with Redis Labs internal cloud account
	// Cloud account identifier. Default: Redis Labs internal cloud account (using Cloud Account Id = 1 implies using Redis Labs internal cloud account). Note that a GCP subscription can be created only with Redis Labs internal cloud account
	// +kubebuilder:validation:Optional
	CloudAccountID *string `json:"cloudAccountId,omitempty" tf:"cloud_account_id,omitempty"`

	// The cloud provider to use with the subscription, (either AWS or GCP). Default: ‘AWS’. Modifying this attribute will force creation of a new resource.
	// The cloud provider to use with the subscription, (either `AWS` or `GCP`)
	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// A region object, documented below. Modifying this attribute will force creation of a new resource.
	// Cloud networking details, per region (single region or multiple regions for Active-Active cluster only)
	// +kubebuilder:validation:Optional
	Region []RegionParameters `json:"region" tf:"region,omitempty"`
}

type CreationPlanInitParameters struct {

	// Relevant only to ram-and-flash clusters
	// Estimated average size (measured in bytes) of the items stored in the database. The value needs to
	// be the maximum average item size defined in one of your databases.  Default: 1000
	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
	AverageItemSizeInBytes *float64 `json:"averageItemSizeInBytes,omitempty" tf:"average_item_size_in_bytes,omitempty"`

	// instead
	// Maximum amount of data in the dataset for this specific database in GB
	DatasetSizeInGb *float64 `json:"datasetSizeInGb,omitempty" tf:"dataset_size_in_gb,omitempty"`

	// Maximum memory usage that will be used for your largest planned database. You can not set both dataset_size_in_gb and memory_limit_in_gb. Deprecated: Use
	// (Deprecated) Maximum memory usage for each database
	MemoryLimitInGb *float64 `json:"memoryLimitInGb,omitempty" tf:"memory_limit_in_gb,omitempty"`

	// a list of modules that will be used by the databases in this subscription. Not currently compatible with ‘ram-and-flash’ memory storage.
	// Example: modules = ["RedisJSON", "RediSearch", "RedisTimeSeries", "RedisBloom"]
	// Modules that will be used by the databases in this subscription.
	Modules []*string `json:"modules,omitempty" tf:"modules,omitempty"`

	// The planned number of databases in the subscription
	// The planned number of databases
	Quantity *float64 `json:"quantity,omitempty" tf:"quantity,omitempty"`

	// Query performance factor for this specific database
	QueryPerformanceFactor *string `json:"queryPerformanceFactor,omitempty" tf:"query_performance_factor,omitempty"`

	// Databases replication. Default: ‘true’
	// Databases replication
	Replication *bool `json:"replication,omitempty" tf:"replication,omitempty"`

	// Support Redis open-source (OSS) Cluster API. Default: ‘false’
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterAPI *bool `json:"supportOssClusterApi,omitempty" tf:"support_oss_cluster_api,omitempty"`

	// Throughput measurement method that will be used by your databases. Either number-of-shards or operations-per-second. number-of-shards is deprecated and only supported for legacy deployments.
	// Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
	ThroughputMeasurementBy *string `json:"throughputMeasurementBy,omitempty" tf:"throughput_measurement_by,omitempty"`

	// Throughput value that will be used by your databases (as applies to selected measurement method). The value needs to be the maximum throughput measurement value defined in one of your databases
	// Throughput value (as applies to selected measurement method)
	ThroughputMeasurementValue *float64 `json:"throughputMeasurementValue,omitempty" tf:"throughput_measurement_value,omitempty"`
}

type CreationPlanObservation struct {

	// Relevant only to ram-and-flash clusters
	// Estimated average size (measured in bytes) of the items stored in the database. The value needs to
	// be the maximum average item size defined in one of your databases.  Default: 1000
	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
	AverageItemSizeInBytes *float64 `json:"averageItemSizeInBytes,omitempty" tf:"average_item_size_in_bytes,omitempty"`

	// instead
	// Maximum amount of data in the dataset for this specific database in GB
	DatasetSizeInGb *float64 `json:"datasetSizeInGb,omitempty" tf:"dataset_size_in_gb,omitempty"`

	// Maximum memory usage that will be used for your largest planned database. You can not set both dataset_size_in_gb and memory_limit_in_gb. Deprecated: Use
	// (Deprecated) Maximum memory usage for each database
	MemoryLimitInGb *float64 `json:"memoryLimitInGb,omitempty" tf:"memory_limit_in_gb,omitempty"`

	// a list of modules that will be used by the databases in this subscription. Not currently compatible with ‘ram-and-flash’ memory storage.
	// Example: modules = ["RedisJSON", "RediSearch", "RedisTimeSeries", "RedisBloom"]
	// Modules that will be used by the databases in this subscription.
	Modules []*string `json:"modules,omitempty" tf:"modules,omitempty"`

	// The planned number of databases in the subscription
	// The planned number of databases
	Quantity *float64 `json:"quantity,omitempty" tf:"quantity,omitempty"`

	// Query performance factor for this specific database
	QueryPerformanceFactor *string `json:"queryPerformanceFactor,omitempty" tf:"query_performance_factor,omitempty"`

	// Databases replication. Default: ‘true’
	// Databases replication
	Replication *bool `json:"replication,omitempty" tf:"replication,omitempty"`

	// Support Redis open-source (OSS) Cluster API. Default: ‘false’
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterAPI *bool `json:"supportOssClusterApi,omitempty" tf:"support_oss_cluster_api,omitempty"`

	// Throughput measurement method that will be used by your databases. Either number-of-shards or operations-per-second. number-of-shards is deprecated and only supported for legacy deployments.
	// Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
	ThroughputMeasurementBy *string `json:"throughputMeasurementBy,omitempty" tf:"throughput_measurement_by,omitempty"`

	// Throughput value that will be used by your databases (as applies to selected measurement method). The value needs to be the maximum throughput measurement value defined in one of your databases
	// Throughput value (as applies to selected measurement method)
	ThroughputMeasurementValue *float64 `json:"throughputMeasurementValue,omitempty" tf:"throughput_measurement_value,omitempty"`
}

type CreationPlanParameters struct {

	// Relevant only to ram-and-flash clusters
	// Estimated average size (measured in bytes) of the items stored in the database. The value needs to
	// be the maximum average item size defined in one of your databases.  Default: 1000
	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
	// +kubebuilder:validation:Optional
	AverageItemSizeInBytes *float64 `json:"averageItemSizeInBytes,omitempty" tf:"average_item_size_in_bytes,omitempty"`

	// instead
	// Maximum amount of data in the dataset for this specific database in GB
	// +kubebuilder:validation:Optional
	DatasetSizeInGb *float64 `json:"datasetSizeInGb,omitempty" tf:"dataset_size_in_gb,omitempty"`

	// Maximum memory usage that will be used for your largest planned database. You can not set both dataset_size_in_gb and memory_limit_in_gb. Deprecated: Use
	// (Deprecated) Maximum memory usage for each database
	// +kubebuilder:validation:Optional
	MemoryLimitInGb *float64 `json:"memoryLimitInGb,omitempty" tf:"memory_limit_in_gb,omitempty"`

	// a list of modules that will be used by the databases in this subscription. Not currently compatible with ‘ram-and-flash’ memory storage.
	// Example: modules = ["RedisJSON", "RediSearch", "RedisTimeSeries", "RedisBloom"]
	// Modules that will be used by the databases in this subscription.
	// +kubebuilder:validation:Optional
	Modules []*string `json:"modules,omitempty" tf:"modules,omitempty"`

	// The planned number of databases in the subscription
	// The planned number of databases
	// +kubebuilder:validation:Optional
	Quantity *float64 `json:"quantity" tf:"quantity,omitempty"`

	// Query performance factor for this specific database
	// +kubebuilder:validation:Optional
	QueryPerformanceFactor *string `json:"queryPerformanceFactor,omitempty" tf:"query_performance_factor,omitempty"`

	// Databases replication. Default: ‘true’
	// Databases replication
	// +kubebuilder:validation:Optional
	Replication *bool `json:"replication" tf:"replication,omitempty"`

	// Support Redis open-source (OSS) Cluster API. Default: ‘false’
	// Support Redis open-source (OSS) Cluster API
	// +kubebuilder:validation:Optional
	SupportOssClusterAPI *bool `json:"supportOssClusterApi,omitempty" tf:"support_oss_cluster_api,omitempty"`

	// Throughput measurement method that will be used by your databases. Either number-of-shards or operations-per-second. number-of-shards is deprecated and only supported for legacy deployments.
	// Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
	// +kubebuilder:validation:Optional
	ThroughputMeasurementBy *string `json:"throughputMeasurementBy" tf:"throughput_measurement_by,omitempty"`

	// Throughput value that will be used by your databases (as applies to selected measurement method). The value needs to be the maximum throughput measurement value defined in one of your databases
	// Throughput value (as applies to selected measurement method)
	// +kubebuilder:validation:Optional
	ThroughputMeasurementValue *float64 `json:"throughputMeasurementValue" tf:"throughput_measurement_value,omitempty"`
}

type MaintenanceWindowsInitParameters struct {

	// Either automatic (Redis specified) or manual (User specified)
	// Either automatic (Redis specified) or manual (User specified)
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// A list of windows (if manual mode)
	// A list of maintenance windows for manual-mode
	Window []WindowInitParameters `json:"window,omitempty" tf:"window,omitempty"`
}

type MaintenanceWindowsObservation struct {

	// Either automatic (Redis specified) or manual (User specified)
	// Either automatic (Redis specified) or manual (User specified)
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// A list of windows (if manual mode)
	// A list of maintenance windows for manual-mode
	Window []WindowObservation `json:"window,omitempty" tf:"window,omitempty"`
}

type MaintenanceWindowsParameters struct {

	// Either automatic (Redis specified) or manual (User specified)
	// Either automatic (Redis specified) or manual (User specified)
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// A list of windows (if manual mode)
	// A list of maintenance windows for manual-mode
	// +kubebuilder:validation:Optional
	Window []WindowParameters `json:"window,omitempty" tf:"window,omitempty"`
}

type NetworksInitParameters struct {
}

type NetworksObservation struct {

	// Deployment CIDR mask for the generated
	NetworkingDeploymentCidr *string `json:"networkingDeploymentCidr,omitempty" tf:"networking_deployment_cidr,omitempty"`

	// The subnet that the subscription deploys into
	NetworkingSubnetID *string `json:"networkingSubnetId,omitempty" tf:"networking_subnet_id,omitempty"`

	// VPC id for the generated network
	NetworkingVPCID *string `json:"networkingVpcId,omitempty" tf:"networking_vpc_id,omitempty"`
}

type NetworksParameters struct {
}

type PricingInitParameters struct {
}

type PricingObservation struct {

	// A meaningful name to identify the subscription
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	PriceCurrency *string `json:"priceCurrency,omitempty" tf:"price_currency,omitempty"`

	PricePerUnit *float64 `json:"pricePerUnit,omitempty" tf:"price_per_unit,omitempty"`

	PricePeriod *string `json:"pricePeriod,omitempty" tf:"price_period,omitempty"`

	// Self-explanatory.
	Quantity *float64 `json:"quantity,omitempty" tf:"quantity,omitempty"`

	QuantityMeasurement *string `json:"quantityMeasurement,omitempty" tf:"quantity_measurement,omitempty"`

	// Deployment region as defined by cloud provider. Modifying this attribute will force creation of a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The type of cost. E.g. 'Shards'.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	TypeDetails *string `json:"typeDetails,omitempty" tf:"type_details,omitempty"`
}

type PricingParameters struct {
}

type RegionInitParameters struct {

	// Support deployment on multiple availability zones within the selected region. Default: ‘false’. Modifying this attribute will force creation of a new resource.
	// Support deployment on multiple availability zones within the selected region
	MultipleAvailabilityZones *bool `json:"multipleAvailabilityZones,omitempty" tf:"multiple_availability_zones,omitempty"`

	// Deployment CIDR mask for the generated
	// Deployment CIDR mask
	NetworkingDeploymentCidr *string `json:"networkingDeploymentCidr,omitempty" tf:"networking_deployment_cidr,omitempty"`

	// VPC id for the generated network
	// Either an existing VPC Id (already exists in the specific region) or create a new VPC (if no VPC is specified)
	NetworkingVPCID *string `json:"networkingVpcId,omitempty" tf:"networking_vpc_id,omitempty"`

	// Availability zones deployment preferences (for the selected provider & region). If multiple_availability_zones is set to 'true', select three availability zones from the list. If you don't want to specify preferred availability zones, set this attribute to an empty list ('[]'). Modifying this attribute will force creation of a new resource.
	// List of availability zones used
	PreferredAvailabilityZones []*string `json:"preferredAvailabilityZones,omitempty" tf:"preferred_availability_zones,omitempty"`

	// Deployment region as defined by cloud provider. Modifying this attribute will force creation of a new resource.
	// Deployment region as defined by cloud provider
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type RegionObservation struct {

	// Support deployment on multiple availability zones within the selected region. Default: ‘false’. Modifying this attribute will force creation of a new resource.
	// Support deployment on multiple availability zones within the selected region
	MultipleAvailabilityZones *bool `json:"multipleAvailabilityZones,omitempty" tf:"multiple_availability_zones,omitempty"`

	// Deployment CIDR mask for the generated
	// Deployment CIDR mask
	NetworkingDeploymentCidr *string `json:"networkingDeploymentCidr,omitempty" tf:"networking_deployment_cidr,omitempty"`

	// VPC id for the generated network
	// Either an existing VPC Id (already exists in the specific region) or create a new VPC (if no VPC is specified)
	NetworkingVPCID *string `json:"networkingVpcId,omitempty" tf:"networking_vpc_id,omitempty"`

	// List of generated network configuration
	// List of networks used
	Networks []NetworksObservation `json:"networks,omitempty" tf:"networks,omitempty"`

	// Availability zones deployment preferences (for the selected provider & region). If multiple_availability_zones is set to 'true', select three availability zones from the list. If you don't want to specify preferred availability zones, set this attribute to an empty list ('[]'). Modifying this attribute will force creation of a new resource.
	// List of availability zones used
	PreferredAvailabilityZones []*string `json:"preferredAvailabilityZones,omitempty" tf:"preferred_availability_zones,omitempty"`

	// Deployment region as defined by cloud provider. Modifying this attribute will force creation of a new resource.
	// Deployment region as defined by cloud provider
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type RegionParameters struct {

	// Support deployment on multiple availability zones within the selected region. Default: ‘false’. Modifying this attribute will force creation of a new resource.
	// Support deployment on multiple availability zones within the selected region
	// +kubebuilder:validation:Optional
	MultipleAvailabilityZones *bool `json:"multipleAvailabilityZones,omitempty" tf:"multiple_availability_zones,omitempty"`

	// Deployment CIDR mask for the generated
	// Deployment CIDR mask
	// +kubebuilder:validation:Optional
	NetworkingDeploymentCidr *string `json:"networkingDeploymentCidr" tf:"networking_deployment_cidr,omitempty"`

	// VPC id for the generated network
	// Either an existing VPC Id (already exists in the specific region) or create a new VPC (if no VPC is specified)
	// +kubebuilder:validation:Optional
	NetworkingVPCID *string `json:"networkingVpcId,omitempty" tf:"networking_vpc_id,omitempty"`

	// Availability zones deployment preferences (for the selected provider & region). If multiple_availability_zones is set to 'true', select three availability zones from the list. If you don't want to specify preferred availability zones, set this attribute to an empty list ('[]'). Modifying this attribute will force creation of a new resource.
	// List of availability zones used
	// +kubebuilder:validation:Optional
	PreferredAvailabilityZones []*string `json:"preferredAvailabilityZones,omitempty" tf:"preferred_availability_zones,omitempty"`

	// Deployment region as defined by cloud provider. Modifying this attribute will force creation of a new resource.
	// Deployment region as defined by cloud provider
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`
}

type SubscriptionInitParameters struct {

	// An allowlist object, documented below
	// An allowlist object
	Allowlist []AllowlistInitParameters `json:"allowlist,omitempty" tf:"allowlist,omitempty"`

	// A cloud provider object, documented below. Modifying this attribute will force creation of a new resource.
	// A cloud provider object
	CloudProvider []CloudProviderInitParameters `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// A creation plan object, documented below.
	// Information about the planned databases used to optimise the database infrastructure. This information is only used when creating a new subscription and any changes will be ignored after this.
	CreationPlan []CreationPlanInitParameters `json:"creationPlan,omitempty" tf:"creation_plan,omitempty"`

	// The subscription's maintenance window specification, documented below.
	// Specify the subscription's maintenance windows
	MaintenanceWindows []MaintenanceWindowsInitParameters `json:"maintenanceWindows,omitempty" tf:"maintenance_windows,omitempty"`

	// Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’. Modifying this attribute will force creation of a new resource.
	// Memory storage preference: either ‘ram’ or a combination of 'ram-and-flash’
	MemoryStorage *string `json:"memoryStorage,omitempty" tf:"memory_storage,omitempty"`

	// A meaningful name to identify the subscription
	// A meaningful name to identify the subscription
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// card or marketplace). If credit-card is specified, payment_method_id must be defined. Default: 'credit-card'. (Changes to) this attribute are ignored after creation.
	// Payment method for the requested subscription. If credit card is specified, the payment method id must be defined. This information is only used when creating a new subscription and any changes will be ignored after this.
	PaymentMethod *string `json:"paymentMethod,omitempty" tf:"payment_method,omitempty"`

	// A valid payment method pre-defined in the current account. Only Required when payment_method is credit-card.
	// A valid payment method pre-defined in the current account
	PaymentMethodID *string `json:"paymentMethodId,omitempty" tf:"payment_method_id,omitempty"`

	// The Redis version of the databases in the subscription. If omitted, the Redis version will be the default. Modifying this attribute will force creation of a new resource.
	// Version of Redis to create
	RedisVersion *string `json:"redisVersion,omitempty" tf:"redis_version,omitempty"`
}

type SubscriptionObservation struct {

	// An allowlist object, documented below
	// An allowlist object
	Allowlist []AllowlistObservation `json:"allowlist,omitempty" tf:"allowlist,omitempty"`

	// A cloud provider object, documented below. Modifying this attribute will force creation of a new resource.
	// A cloud provider object
	CloudProvider []CloudProviderObservation `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// A creation plan object, documented below.
	// Information about the planned databases used to optimise the database infrastructure. This information is only used when creating a new subscription and any changes will be ignored after this.
	CreationPlan []CreationPlanObservation `json:"creationPlan,omitempty" tf:"creation_plan,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The subscription's maintenance window specification, documented below.
	// Specify the subscription's maintenance windows
	MaintenanceWindows []MaintenanceWindowsObservation `json:"maintenanceWindows,omitempty" tf:"maintenance_windows,omitempty"`

	// Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’. Modifying this attribute will force creation of a new resource.
	// Memory storage preference: either ‘ram’ or a combination of 'ram-and-flash’
	MemoryStorage *string `json:"memoryStorage,omitempty" tf:"memory_storage,omitempty"`

	// A meaningful name to identify the subscription
	// A meaningful name to identify the subscription
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// card or marketplace). If credit-card is specified, payment_method_id must be defined. Default: 'credit-card'. (Changes to) this attribute are ignored after creation.
	// Payment method for the requested subscription. If credit card is specified, the payment method id must be defined. This information is only used when creating a new subscription and any changes will be ignored after this.
	PaymentMethod *string `json:"paymentMethod,omitempty" tf:"payment_method,omitempty"`

	// A valid payment method pre-defined in the current account. Only Required when payment_method is credit-card.
	// A valid payment method pre-defined in the current account
	PaymentMethodID *string `json:"paymentMethodId,omitempty" tf:"payment_method_id,omitempty"`

	// Pricing details totalled over this Subscription
	Pricing []PricingObservation `json:"pricing,omitempty" tf:"pricing,omitempty"`

	// The Redis version of the databases in the subscription. If omitted, the Redis version will be the default. Modifying this attribute will force creation of a new resource.
	// Version of Redis to create
	RedisVersion *string `json:"redisVersion,omitempty" tf:"redis_version,omitempty"`
}

type SubscriptionParameters struct {

	// An allowlist object, documented below
	// An allowlist object
	// +kubebuilder:validation:Optional
	Allowlist []AllowlistParameters `json:"allowlist,omitempty" tf:"allowlist,omitempty"`

	// A cloud provider object, documented below. Modifying this attribute will force creation of a new resource.
	// A cloud provider object
	// +kubebuilder:validation:Optional
	CloudProvider []CloudProviderParameters `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// A creation plan object, documented below.
	// Information about the planned databases used to optimise the database infrastructure. This information is only used when creating a new subscription and any changes will be ignored after this.
	// +kubebuilder:validation:Optional
	CreationPlan []CreationPlanParameters `json:"creationPlan,omitempty" tf:"creation_plan,omitempty"`

	// The subscription's maintenance window specification, documented below.
	// Specify the subscription's maintenance windows
	// +kubebuilder:validation:Optional
	MaintenanceWindows []MaintenanceWindowsParameters `json:"maintenanceWindows,omitempty" tf:"maintenance_windows,omitempty"`

	// Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’. Modifying this attribute will force creation of a new resource.
	// Memory storage preference: either ‘ram’ or a combination of 'ram-and-flash’
	// +kubebuilder:validation:Optional
	MemoryStorage *string `json:"memoryStorage,omitempty" tf:"memory_storage,omitempty"`

	// A meaningful name to identify the subscription
	// A meaningful name to identify the subscription
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// card or marketplace). If credit-card is specified, payment_method_id must be defined. Default: 'credit-card'. (Changes to) this attribute are ignored after creation.
	// Payment method for the requested subscription. If credit card is specified, the payment method id must be defined. This information is only used when creating a new subscription and any changes will be ignored after this.
	// +kubebuilder:validation:Optional
	PaymentMethod *string `json:"paymentMethod,omitempty" tf:"payment_method,omitempty"`

	// A valid payment method pre-defined in the current account. Only Required when payment_method is credit-card.
	// A valid payment method pre-defined in the current account
	// +kubebuilder:validation:Optional
	PaymentMethodID *string `json:"paymentMethodId,omitempty" tf:"payment_method_id,omitempty"`

	// The Redis version of the databases in the subscription. If omitted, the Redis version will be the default. Modifying this attribute will force creation of a new resource.
	// Version of Redis to create
	// +kubebuilder:validation:Optional
	RedisVersion *string `json:"redisVersion,omitempty" tf:"redis_version,omitempty"`
}

type WindowInitParameters struct {

	// A list of weekdays on which the window is open ('Monday', 'Tuesday' etc)
	// A list of days on which the window is open ('Monday', 'Tuesday' etc)
	Days []*string `json:"days,omitempty" tf:"days,omitempty"`

	// How long the window is open (4-24 hours)
	// How long maintenance may take
	DurationInHours *float64 `json:"durationInHours,omitempty" tf:"duration_in_hours,omitempty"`

	// What hour in the day (0-23) the window opens
	// What hour in the day (0-23) may maintenance start
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`
}

type WindowObservation struct {

	// A list of weekdays on which the window is open ('Monday', 'Tuesday' etc)
	// A list of days on which the window is open ('Monday', 'Tuesday' etc)
	Days []*string `json:"days,omitempty" tf:"days,omitempty"`

	// How long the window is open (4-24 hours)
	// How long maintenance may take
	DurationInHours *float64 `json:"durationInHours,omitempty" tf:"duration_in_hours,omitempty"`

	// What hour in the day (0-23) the window opens
	// What hour in the day (0-23) may maintenance start
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`
}

type WindowParameters struct {

	// A list of weekdays on which the window is open ('Monday', 'Tuesday' etc)
	// A list of days on which the window is open ('Monday', 'Tuesday' etc)
	// +kubebuilder:validation:Optional
	Days []*string `json:"days" tf:"days,omitempty"`

	// How long the window is open (4-24 hours)
	// How long maintenance may take
	// +kubebuilder:validation:Optional
	DurationInHours *float64 `json:"durationInHours" tf:"duration_in_hours,omitempty"`

	// What hour in the day (0-23) the window opens
	// What hour in the day (0-23) may maintenance start
	// +kubebuilder:validation:Optional
	StartHour *float64 `json:"startHour" tf:"start_hour,omitempty"`
}

// SubscriptionSpec defines the desired state of Subscription
type SubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubscriptionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SubscriptionInitParameters `json:"initProvider,omitempty"`
}

// SubscriptionStatus defines the observed state of Subscription.
type SubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Subscription is the Schema for the Subscriptions API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rediscloud}
type Subscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cloudProvider) || (has(self.initProvider) && has(self.initProvider.cloudProvider))",message="spec.forProvider.cloudProvider is a required parameter"
	Spec   SubscriptionSpec   `json:"spec"`
	Status SubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionList contains a list of Subscriptions
type SubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Subscription `json:"items"`
}

// Repository type metadata.
var (
	Subscription_Kind             = "Subscription"
	Subscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Subscription_Kind}.String()
	Subscription_KindAPIVersion   = Subscription_Kind + "." + CRDGroupVersion.String()
	Subscription_GroupVersionKind = CRDGroupVersion.WithKind(Subscription_Kind)
)

func init() {
	SchemeBuilder.Register(&Subscription{}, &SubscriptionList{})
}
