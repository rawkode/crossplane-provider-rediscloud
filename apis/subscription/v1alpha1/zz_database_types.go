// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertInitParameters struct {

	// Alert name. (either: 'dataset-size', 'datasets-size', 'throughput-higher-than', 'throughput-lower-than', 'latency', 'syncsource-error', 'syncsource-lag' or 'connections-limit')
	// Alert name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Alert value
	// Alert value
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type AlertObservation struct {

	// Alert name. (either: 'dataset-size', 'datasets-size', 'throughput-higher-than', 'throughput-lower-than', 'latency', 'syncsource-error', 'syncsource-lag' or 'connections-limit')
	// Alert name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Alert value
	// Alert value
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type AlertParameters struct {

	// Alert name. (either: 'dataset-size', 'datasets-size', 'throughput-higher-than', 'throughput-lower-than', 'latency', 'syncsource-error', 'syncsource-lag' or 'connections-limit')
	// Alert name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Alert value
	// Alert value
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type DatabaseInitParameters struct {

	// A block defining Redis database alert, documented below, can be specified multiple times
	// Set of alerts to enable on the database
	Alert []AlertInitParameters `json:"alert,omitempty" tf:"alert,omitempty"`

	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes)
	// of the items stored in the database. Default: 1000
	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
	AverageItemSizeInBytes *float64 `json:"averageItemSizeInBytes,omitempty" tf:"average_item_size_in_bytes,omitempty"`

	// SSL certificate to authenticate user connections, conflicts with client_tls_certificates
	// SSL certificate to authenticate user connections
	ClientSSLCertificate *string `json:"clientSslCertificate,omitempty" tf:"client_ssl_certificate,omitempty"`

	// A list of TLS certificates to authenticate user connections, conflicts with client_ssl_certificate
	// TLS certificates to authenticate user connections
	ClientTLSCertificates []*string `json:"clientTlsCertificates,omitempty" tf:"client_tls_certificates,omitempty"`

	// The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'). Default: 'volatile-lru'
	// (Optional) The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
	DataEviction *string `json:"dataEviction,omitempty" tf:"data_eviction,omitempty"`

	// Rate of database's storage data persistence (either: 'none', 'aof-every-1-second', 'aof-every-write', 'snapshot-every-1-hour', 'snapshot-every-6-hours' or 'snapshot-every-12-hours'). Default: ‘none’
	// Rate of database data persistence (in persistent storage)
	DataPersistence *string `json:"dataPersistence,omitempty" tf:"data_persistence,omitempty"`

	// is unset
	// Maximum amount of data in the dataset for this specific database in GB
	DatasetSizeInGb *float64 `json:"datasetSizeInGb,omitempty" tf:"dataset_size_in_gb,omitempty"`

	// When true enables connecting to the database with the default user. Default true.
	// When 'true', enables connecting to the database with the 'default' user. Default: 'true'
	EnableDefaultUser *bool `json:"enableDefaultUser,omitempty" tf:"enable_default_user,omitempty"`

	// Use TLS for authentication. Default: ‘false’
	// Use TLS for authentication
	EnableTLS *bool `json:"enableTls,omitempty" tf:"enable_tls,omitempty"`

	// Should use the external endpoint for open-source (OSS) Cluster API.
	// Can only be enabled if OSS Cluster API support is enabled. Default: 'false'
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterAPI *bool `json:"externalEndpointForOssClusterApi,omitempty" tf:"external_endpoint_for_oss_cluster_api,omitempty"`

	// List of regular expression rules to shard the database by. See
	// the documentation on clustering for more information on the
	// hashing policy. This cannot be set when support_oss_cluster_api is set to true.
	// List of regular expression rules to shard the database by. See the documentation on clustering for more information on the hashing policy - https://docs.redislabs.com/latest/rc/concepts/clustering/
	HashingPolicy []*string `json:"hashingPolicy,omitempty" tf:"hashing_policy,omitempty"`

	// Maximum memory usage for this specific database, including replication and other overhead Deprecated in favor of
	// (Deprecated) Maximum memory usage for this specific database
	MemoryLimitInGb *float64 `json:"memoryLimitInGb,omitempty" tf:"memory_limit_in_gb,omitempty"`

	// A list of modules objects, documented below. Modifying this attribute will force creation of a new resource.
	// Modules to be provisioned in the database
	Modules []ModulesInitParameters `json:"modules,omitempty" tf:"modules,omitempty"`

	// A meaningful name to identify the database
	// A meaningful name to identify the database
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Password to access the database. If omitted, a random 32 character long alphanumeric password will be automatically generated
	// Password used to access the database. If left empty, the password will be generated automatically
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Path that will be used to store database backup files. Deprecated: Use
	// Path that will be used to store database backup files
	PeriodicBackupPath *string `json:"periodicBackupPath,omitempty" tf:"periodic_backup_path,omitempty"`

	// TCP port on which the database is available - must be between 10000 and 19999. Modifying this attribute will force creation of a new resource.
	// TCP port on which the database is available
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The protocol that will be used to access the database, (either ‘redis’ or ‘memcached’) Default: ‘redis’. Modifying this attribute will force creation of a new resource.
	// The protocol that will be used to access the database, (either ‘redis’ or 'memcached’)
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Query performance factor for this specific database
	QueryPerformanceFactor *string `json:"queryPerformanceFactor,omitempty" tf:"query_performance_factor,omitempty"`

	// block instead
	// An object that specifies the backup options for the database
	RemoteBackup []RemoteBackupInitParameters `json:"remoteBackup,omitempty" tf:"remote_backup,omitempty"`

	// Set of Redis database URIs, in the format redis://user:password@host:port, that this
	// database will be a replica of. If the URI provided is Redis Labs Cloud instance, only host and port should be provided.
	// Cannot be enabled when support_oss_cluster_api is enabled.
	// Set of Redis database URIs, in the format `redis://user:password@host:port`, that this database will be a replica of. If the URI provided is Redis Labs Cloud instance, only host and port should be provided
	// +listType=set
	ReplicaOf []*string `json:"replicaOf,omitempty" tf:"replica_of,omitempty"`

	// Databases replication. Default: ‘true’
	// Databases replication
	Replication *bool `json:"replication,omitempty" tf:"replication,omitempty"`

	// Either resp2 or resp3. Database's RESP version. Must be compatible with the Redis version.
	// The database's RESP version
	RespVersion *string `json:"respVersion,omitempty" tf:"resp_version,omitempty"`

	// List of source IP addresses or subnet masks. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: [‘192.168.10.0/32’, ‘192.168.12.0/24’])
	// Set of CIDR addresses to allow access to the database
	// +listType=set
	SourceIps []*string `json:"sourceIps,omitempty" tf:"source_ips,omitempty"`

	// The ID of the subscription to create the database in. Modifying this attribute will force creation of a new resource.
	// Identifier of the pro subscription
	SubscriptionID *float64 `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// Support Redis open-source (OSS) Cluster API. Default: ‘false’
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterAPI *bool `json:"supportOssClusterApi,omitempty" tf:"support_oss_cluster_api,omitempty"`

	// A string/string map of Tags to associate with this database. Note that all keys and values must be lowercase.
	// Tags for database management
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Throughput measurement method that will be used by your databases. Either number-of-shards or operations-per-second. number-of-shards is deprecated and only supported for legacy deployments.
	// Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
	ThroughputMeasurementBy *string `json:"throughputMeasurementBy,omitempty" tf:"throughput_measurement_by,omitempty"`

	// Throughput value (as applies to selected measurement method)
	// Throughput value (as applies to selected measurement method)
	ThroughputMeasurementValue *float64 `json:"throughputMeasurementValue,omitempty" tf:"throughput_measurement_value,omitempty"`
}

type DatabaseObservation struct {

	// A block defining Redis database alert, documented below, can be specified multiple times
	// Set of alerts to enable on the database
	Alert []AlertObservation `json:"alert,omitempty" tf:"alert,omitempty"`

	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes)
	// of the items stored in the database. Default: 1000
	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
	AverageItemSizeInBytes *float64 `json:"averageItemSizeInBytes,omitempty" tf:"average_item_size_in_bytes,omitempty"`

	// SSL certificate to authenticate user connections, conflicts with client_tls_certificates
	// SSL certificate to authenticate user connections
	ClientSSLCertificate *string `json:"clientSslCertificate,omitempty" tf:"client_ssl_certificate,omitempty"`

	// A list of TLS certificates to authenticate user connections, conflicts with client_ssl_certificate
	// TLS certificates to authenticate user connections
	ClientTLSCertificates []*string `json:"clientTlsCertificates,omitempty" tf:"client_tls_certificates,omitempty"`

	// Identifier of the database created
	// Identifier of the database created
	DBID *float64 `json:"dbId,omitempty" tf:"db_id,omitempty"`

	// The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'). Default: 'volatile-lru'
	// (Optional) The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
	DataEviction *string `json:"dataEviction,omitempty" tf:"data_eviction,omitempty"`

	// Rate of database's storage data persistence (either: 'none', 'aof-every-1-second', 'aof-every-write', 'snapshot-every-1-hour', 'snapshot-every-6-hours' or 'snapshot-every-12-hours'). Default: ‘none’
	// Rate of database data persistence (in persistent storage)
	DataPersistence *string `json:"dataPersistence,omitempty" tf:"data_persistence,omitempty"`

	// is unset
	// Maximum amount of data in the dataset for this specific database in GB
	DatasetSizeInGb *float64 `json:"datasetSizeInGb,omitempty" tf:"dataset_size_in_gb,omitempty"`

	// When true enables connecting to the database with the default user. Default true.
	// When 'true', enables connecting to the database with the 'default' user. Default: 'true'
	EnableDefaultUser *bool `json:"enableDefaultUser,omitempty" tf:"enable_default_user,omitempty"`

	// Use TLS for authentication. Default: ‘false’
	// Use TLS for authentication
	EnableTLS *bool `json:"enableTls,omitempty" tf:"enable_tls,omitempty"`

	// Should use the external endpoint for open-source (OSS) Cluster API.
	// Can only be enabled if OSS Cluster API support is enabled. Default: 'false'
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterAPI *bool `json:"externalEndpointForOssClusterApi,omitempty" tf:"external_endpoint_for_oss_cluster_api,omitempty"`

	// List of regular expression rules to shard the database by. See
	// the documentation on clustering for more information on the
	// hashing policy. This cannot be set when support_oss_cluster_api is set to true.
	// List of regular expression rules to shard the database by. See the documentation on clustering for more information on the hashing policy - https://docs.redislabs.com/latest/rc/concepts/clustering/
	HashingPolicy []*string `json:"hashingPolicy,omitempty" tf:"hashing_policy,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Maximum memory usage for this specific database, including replication and other overhead Deprecated in favor of
	// (Deprecated) Maximum memory usage for this specific database
	MemoryLimitInGb *float64 `json:"memoryLimitInGb,omitempty" tf:"memory_limit_in_gb,omitempty"`

	// A list of modules objects, documented below. Modifying this attribute will force creation of a new resource.
	// Modules to be provisioned in the database
	Modules []ModulesObservation `json:"modules,omitempty" tf:"modules,omitempty"`

	// A meaningful name to identify the database
	// A meaningful name to identify the database
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Path that will be used to store database backup files. Deprecated: Use
	// Path that will be used to store database backup files
	PeriodicBackupPath *string `json:"periodicBackupPath,omitempty" tf:"periodic_backup_path,omitempty"`

	// TCP port on which the database is available - must be between 10000 and 19999. Modifying this attribute will force creation of a new resource.
	// TCP port on which the database is available
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Private endpoint to access the database
	// Private endpoint to access the database
	PrivateEndpoint *string `json:"privateEndpoint,omitempty" tf:"private_endpoint,omitempty"`

	// The protocol that will be used to access the database, (either ‘redis’ or ‘memcached’) Default: ‘redis’. Modifying this attribute will force creation of a new resource.
	// The protocol that will be used to access the database, (either ‘redis’ or 'memcached’)
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Public endpoint to access the database
	// Public endpoint to access the database
	PublicEndpoint *string `json:"publicEndpoint,omitempty" tf:"public_endpoint,omitempty"`

	// Query performance factor for this specific database
	QueryPerformanceFactor *string `json:"queryPerformanceFactor,omitempty" tf:"query_performance_factor,omitempty"`

	// block instead
	// An object that specifies the backup options for the database
	RemoteBackup []RemoteBackupObservation `json:"remoteBackup,omitempty" tf:"remote_backup,omitempty"`

	// Set of Redis database URIs, in the format redis://user:password@host:port, that this
	// database will be a replica of. If the URI provided is Redis Labs Cloud instance, only host and port should be provided.
	// Cannot be enabled when support_oss_cluster_api is enabled.
	// Set of Redis database URIs, in the format `redis://user:password@host:port`, that this database will be a replica of. If the URI provided is Redis Labs Cloud instance, only host and port should be provided
	// +listType=set
	ReplicaOf []*string `json:"replicaOf,omitempty" tf:"replica_of,omitempty"`

	// Databases replication. Default: ‘true’
	// Databases replication
	Replication *bool `json:"replication,omitempty" tf:"replication,omitempty"`

	// Either resp2 or resp3. Database's RESP version. Must be compatible with the Redis version.
	// The database's RESP version
	RespVersion *string `json:"respVersion,omitempty" tf:"resp_version,omitempty"`

	// List of source IP addresses or subnet masks. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: [‘192.168.10.0/32’, ‘192.168.12.0/24’])
	// Set of CIDR addresses to allow access to the database
	// +listType=set
	SourceIps []*string `json:"sourceIps,omitempty" tf:"source_ips,omitempty"`

	// The ID of the subscription to create the database in. Modifying this attribute will force creation of a new resource.
	// Identifier of the pro subscription
	SubscriptionID *float64 `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// Support Redis open-source (OSS) Cluster API. Default: ‘false’
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterAPI *bool `json:"supportOssClusterApi,omitempty" tf:"support_oss_cluster_api,omitempty"`

	// A string/string map of Tags to associate with this database. Note that all keys and values must be lowercase.
	// Tags for database management
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Throughput measurement method that will be used by your databases. Either number-of-shards or operations-per-second. number-of-shards is deprecated and only supported for legacy deployments.
	// Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
	ThroughputMeasurementBy *string `json:"throughputMeasurementBy,omitempty" tf:"throughput_measurement_by,omitempty"`

	// Throughput value (as applies to selected measurement method)
	// Throughput value (as applies to selected measurement method)
	ThroughputMeasurementValue *float64 `json:"throughputMeasurementValue,omitempty" tf:"throughput_measurement_value,omitempty"`
}

type DatabaseParameters struct {

	// A block defining Redis database alert, documented below, can be specified multiple times
	// Set of alerts to enable on the database
	// +kubebuilder:validation:Optional
	Alert []AlertParameters `json:"alert,omitempty" tf:"alert,omitempty"`

	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes)
	// of the items stored in the database. Default: 1000
	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
	// +kubebuilder:validation:Optional
	AverageItemSizeInBytes *float64 `json:"averageItemSizeInBytes,omitempty" tf:"average_item_size_in_bytes,omitempty"`

	// SSL certificate to authenticate user connections, conflicts with client_tls_certificates
	// SSL certificate to authenticate user connections
	// +kubebuilder:validation:Optional
	ClientSSLCertificate *string `json:"clientSslCertificate,omitempty" tf:"client_ssl_certificate,omitempty"`

	// A list of TLS certificates to authenticate user connections, conflicts with client_ssl_certificate
	// TLS certificates to authenticate user connections
	// +kubebuilder:validation:Optional
	ClientTLSCertificates []*string `json:"clientTlsCertificates,omitempty" tf:"client_tls_certificates,omitempty"`

	// The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'). Default: 'volatile-lru'
	// (Optional) The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
	// +kubebuilder:validation:Optional
	DataEviction *string `json:"dataEviction,omitempty" tf:"data_eviction,omitempty"`

	// Rate of database's storage data persistence (either: 'none', 'aof-every-1-second', 'aof-every-write', 'snapshot-every-1-hour', 'snapshot-every-6-hours' or 'snapshot-every-12-hours'). Default: ‘none’
	// Rate of database data persistence (in persistent storage)
	// +kubebuilder:validation:Optional
	DataPersistence *string `json:"dataPersistence,omitempty" tf:"data_persistence,omitempty"`

	// is unset
	// Maximum amount of data in the dataset for this specific database in GB
	// +kubebuilder:validation:Optional
	DatasetSizeInGb *float64 `json:"datasetSizeInGb,omitempty" tf:"dataset_size_in_gb,omitempty"`

	// When true enables connecting to the database with the default user. Default true.
	// When 'true', enables connecting to the database with the 'default' user. Default: 'true'
	// +kubebuilder:validation:Optional
	EnableDefaultUser *bool `json:"enableDefaultUser,omitempty" tf:"enable_default_user,omitempty"`

	// Use TLS for authentication. Default: ‘false’
	// Use TLS for authentication
	// +kubebuilder:validation:Optional
	EnableTLS *bool `json:"enableTls,omitempty" tf:"enable_tls,omitempty"`

	// Should use the external endpoint for open-source (OSS) Cluster API.
	// Can only be enabled if OSS Cluster API support is enabled. Default: 'false'
	// Should use the external endpoint for open-source (OSS) Cluster API
	// +kubebuilder:validation:Optional
	ExternalEndpointForOssClusterAPI *bool `json:"externalEndpointForOssClusterApi,omitempty" tf:"external_endpoint_for_oss_cluster_api,omitempty"`

	// List of regular expression rules to shard the database by. See
	// the documentation on clustering for more information on the
	// hashing policy. This cannot be set when support_oss_cluster_api is set to true.
	// List of regular expression rules to shard the database by. See the documentation on clustering for more information on the hashing policy - https://docs.redislabs.com/latest/rc/concepts/clustering/
	// +kubebuilder:validation:Optional
	HashingPolicy []*string `json:"hashingPolicy,omitempty" tf:"hashing_policy,omitempty"`

	// Maximum memory usage for this specific database, including replication and other overhead Deprecated in favor of
	// (Deprecated) Maximum memory usage for this specific database
	// +kubebuilder:validation:Optional
	MemoryLimitInGb *float64 `json:"memoryLimitInGb,omitempty" tf:"memory_limit_in_gb,omitempty"`

	// A list of modules objects, documented below. Modifying this attribute will force creation of a new resource.
	// Modules to be provisioned in the database
	// +kubebuilder:validation:Optional
	Modules []ModulesParameters `json:"modules,omitempty" tf:"modules,omitempty"`

	// A meaningful name to identify the database
	// A meaningful name to identify the database
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Password to access the database. If omitted, a random 32 character long alphanumeric password will be automatically generated
	// Password used to access the database. If left empty, the password will be generated automatically
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Path that will be used to store database backup files. Deprecated: Use
	// Path that will be used to store database backup files
	// +kubebuilder:validation:Optional
	PeriodicBackupPath *string `json:"periodicBackupPath,omitempty" tf:"periodic_backup_path,omitempty"`

	// TCP port on which the database is available - must be between 10000 and 19999. Modifying this attribute will force creation of a new resource.
	// TCP port on which the database is available
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The protocol that will be used to access the database, (either ‘redis’ or ‘memcached’) Default: ‘redis’. Modifying this attribute will force creation of a new resource.
	// The protocol that will be used to access the database, (either ‘redis’ or 'memcached’)
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Query performance factor for this specific database
	// +kubebuilder:validation:Optional
	QueryPerformanceFactor *string `json:"queryPerformanceFactor,omitempty" tf:"query_performance_factor,omitempty"`

	// block instead
	// An object that specifies the backup options for the database
	// +kubebuilder:validation:Optional
	RemoteBackup []RemoteBackupParameters `json:"remoteBackup,omitempty" tf:"remote_backup,omitempty"`

	// Set of Redis database URIs, in the format redis://user:password@host:port, that this
	// database will be a replica of. If the URI provided is Redis Labs Cloud instance, only host and port should be provided.
	// Cannot be enabled when support_oss_cluster_api is enabled.
	// Set of Redis database URIs, in the format `redis://user:password@host:port`, that this database will be a replica of. If the URI provided is Redis Labs Cloud instance, only host and port should be provided
	// +kubebuilder:validation:Optional
	// +listType=set
	ReplicaOf []*string `json:"replicaOf,omitempty" tf:"replica_of,omitempty"`

	// Databases replication. Default: ‘true’
	// Databases replication
	// +kubebuilder:validation:Optional
	Replication *bool `json:"replication,omitempty" tf:"replication,omitempty"`

	// Either resp2 or resp3. Database's RESP version. Must be compatible with the Redis version.
	// The database's RESP version
	// +kubebuilder:validation:Optional
	RespVersion *string `json:"respVersion,omitempty" tf:"resp_version,omitempty"`

	// List of source IP addresses or subnet masks. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: [‘192.168.10.0/32’, ‘192.168.12.0/24’])
	// Set of CIDR addresses to allow access to the database
	// +kubebuilder:validation:Optional
	// +listType=set
	SourceIps []*string `json:"sourceIps,omitempty" tf:"source_ips,omitempty"`

	// The ID of the subscription to create the database in. Modifying this attribute will force creation of a new resource.
	// Identifier of the pro subscription
	// +kubebuilder:validation:Optional
	SubscriptionID *float64 `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// Support Redis open-source (OSS) Cluster API. Default: ‘false’
	// Support Redis open-source (OSS) Cluster API
	// +kubebuilder:validation:Optional
	SupportOssClusterAPI *bool `json:"supportOssClusterApi,omitempty" tf:"support_oss_cluster_api,omitempty"`

	// A string/string map of Tags to associate with this database. Note that all keys and values must be lowercase.
	// Tags for database management
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Throughput measurement method that will be used by your databases. Either number-of-shards or operations-per-second. number-of-shards is deprecated and only supported for legacy deployments.
	// Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
	// +kubebuilder:validation:Optional
	ThroughputMeasurementBy *string `json:"throughputMeasurementBy,omitempty" tf:"throughput_measurement_by,omitempty"`

	// Throughput value (as applies to selected measurement method)
	// Throughput value (as applies to selected measurement method)
	// +kubebuilder:validation:Optional
	ThroughputMeasurementValue *float64 `json:"throughputMeasurementValue,omitempty" tf:"throughput_measurement_value,omitempty"`
}

type ModulesInitParameters struct {

	// A meaningful name to identify the database
	Name *string `json:"name,omitempty" tf:"name"`
}

type ModulesObservation struct {

	// A meaningful name to identify the database
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ModulesParameters struct {

	// A meaningful name to identify the database
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type RemoteBackupInitParameters struct {

	// Defines the interval between backups. Should be in the following format 'every-x-hours'. x is one of [24,12,6,4,2,1]. For example: 'every-4-hours'
	// Defines the frequency of the automatic backup
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// Defines a URI representing the backup storage location
	// Defines a URI representing the backup storage location
	StoragePath *string `json:"storagePath,omitempty" tf:"storage_path,omitempty"`

	// Defines the provider of the storage location
	// Defines the provider of the storage location
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`

	// Defines the hour automatic backups are made - only applicable when the interval is every-12-hours or every-24-hours. For example: '14:00'
	// Defines the hour automatic backups are made - only applicable when interval is `every-12-hours` or `every-24-hours`
	TimeUtc *string `json:"timeUtc,omitempty" tf:"time_utc,omitempty"`
}

type RemoteBackupObservation struct {

	// Defines the interval between backups. Should be in the following format 'every-x-hours'. x is one of [24,12,6,4,2,1]. For example: 'every-4-hours'
	// Defines the frequency of the automatic backup
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// Defines a URI representing the backup storage location
	// Defines a URI representing the backup storage location
	StoragePath *string `json:"storagePath,omitempty" tf:"storage_path,omitempty"`

	// Defines the provider of the storage location
	// Defines the provider of the storage location
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`

	// Defines the hour automatic backups are made - only applicable when the interval is every-12-hours or every-24-hours. For example: '14:00'
	// Defines the hour automatic backups are made - only applicable when interval is `every-12-hours` or `every-24-hours`
	TimeUtc *string `json:"timeUtc,omitempty" tf:"time_utc,omitempty"`
}

type RemoteBackupParameters struct {

	// Defines the interval between backups. Should be in the following format 'every-x-hours'. x is one of [24,12,6,4,2,1]. For example: 'every-4-hours'
	// Defines the frequency of the automatic backup
	// +kubebuilder:validation:Optional
	Interval *string `json:"interval" tf:"interval,omitempty"`

	// Defines a URI representing the backup storage location
	// Defines a URI representing the backup storage location
	// +kubebuilder:validation:Optional
	StoragePath *string `json:"storagePath" tf:"storage_path,omitempty"`

	// Defines the provider of the storage location
	// Defines the provider of the storage location
	// +kubebuilder:validation:Optional
	StorageType *string `json:"storageType" tf:"storage_type,omitempty"`

	// Defines the hour automatic backups are made - only applicable when the interval is every-12-hours or every-24-hours. For example: '14:00'
	// Defines the hour automatic backups are made - only applicable when interval is `every-12-hours` or `every-24-hours`
	// +kubebuilder:validation:Optional
	TimeUtc *string `json:"timeUtc,omitempty" tf:"time_utc,omitempty"`
}

// DatabaseSpec defines the desired state of Database
type DatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DatabaseInitParameters `json:"initProvider,omitempty"`
}

// DatabaseStatus defines the observed state of Database.
type DatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Database is the Schema for the Databases API. database resource in the redis cloud provider provider
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rediscloud}
type Database struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscriptionId) || (has(self.initProvider) && has(self.initProvider.subscriptionId))",message="spec.forProvider.subscriptionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.throughputMeasurementBy) || (has(self.initProvider) && has(self.initProvider.throughputMeasurementBy))",message="spec.forProvider.throughputMeasurementBy is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.throughputMeasurementValue) || (has(self.initProvider) && has(self.initProvider.throughputMeasurementValue))",message="spec.forProvider.throughputMeasurementValue is a required parameter"
	Spec   DatabaseSpec   `json:"spec"`
	Status DatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseList contains a list of Databases
type DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Database `json:"items"`
}

// Repository type metadata.
var (
	Database_Kind             = "Database"
	Database_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Database_Kind}.String()
	Database_KindAPIVersion   = Database_Kind + "." + CRDGroupVersion.String()
	Database_GroupVersionKind = CRDGroupVersion.WithKind(Database_Kind)
)

func init() {
	SchemeBuilder.Register(&Database{}, &DatabaseList{})
}
