//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertInitParameters) DeepCopyInto(out *AlertInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertInitParameters.
func (in *AlertInitParameters) DeepCopy() *AlertInitParameters {
	if in == nil {
		return nil
	}
	out := new(AlertInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertObservation) DeepCopyInto(out *AlertObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertObservation.
func (in *AlertObservation) DeepCopy() *AlertObservation {
	if in == nil {
		return nil
	}
	out := new(AlertObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlertParameters) DeepCopyInto(out *AlertParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlertParameters.
func (in *AlertParameters) DeepCopy() *AlertParameters {
	if in == nil {
		return nil
	}
	out := new(AlertParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Database) DeepCopyInto(out *Database) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Database.
func (in *Database) DeepCopy() *Database {
	if in == nil {
		return nil
	}
	out := new(Database)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Database) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseInitParameters) DeepCopyInto(out *DatabaseInitParameters) {
	*out = *in
	if in.Alert != nil {
		in, out := &in.Alert, &out.Alert
		*out = make([]AlertInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AverageItemSizeInBytes != nil {
		in, out := &in.AverageItemSizeInBytes, &out.AverageItemSizeInBytes
		*out = new(float64)
		**out = **in
	}
	if in.ClientSSLCertificate != nil {
		in, out := &in.ClientSSLCertificate, &out.ClientSSLCertificate
		*out = new(string)
		**out = **in
	}
	if in.ClientTLSCertificates != nil {
		in, out := &in.ClientTLSCertificates, &out.ClientTLSCertificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DataEviction != nil {
		in, out := &in.DataEviction, &out.DataEviction
		*out = new(string)
		**out = **in
	}
	if in.DataPersistence != nil {
		in, out := &in.DataPersistence, &out.DataPersistence
		*out = new(string)
		**out = **in
	}
	if in.DatasetSizeInGb != nil {
		in, out := &in.DatasetSizeInGb, &out.DatasetSizeInGb
		*out = new(float64)
		**out = **in
	}
	if in.EnableDefaultUser != nil {
		in, out := &in.EnableDefaultUser, &out.EnableDefaultUser
		*out = new(bool)
		**out = **in
	}
	if in.EnableTLS != nil {
		in, out := &in.EnableTLS, &out.EnableTLS
		*out = new(bool)
		**out = **in
	}
	if in.ExternalEndpointForOssClusterAPI != nil {
		in, out := &in.ExternalEndpointForOssClusterAPI, &out.ExternalEndpointForOssClusterAPI
		*out = new(bool)
		**out = **in
	}
	if in.HashingPolicy != nil {
		in, out := &in.HashingPolicy, &out.HashingPolicy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MemoryLimitInGb != nil {
		in, out := &in.MemoryLimitInGb, &out.MemoryLimitInGb
		*out = new(float64)
		**out = **in
	}
	if in.Modules != nil {
		in, out := &in.Modules, &out.Modules
		*out = make([]ModulesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PeriodicBackupPath != nil {
		in, out := &in.PeriodicBackupPath, &out.PeriodicBackupPath
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.QueryPerformanceFactor != nil {
		in, out := &in.QueryPerformanceFactor, &out.QueryPerformanceFactor
		*out = new(string)
		**out = **in
	}
	if in.RemoteBackup != nil {
		in, out := &in.RemoteBackup, &out.RemoteBackup
		*out = make([]RemoteBackupInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ReplicaOf != nil {
		in, out := &in.ReplicaOf, &out.ReplicaOf
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = new(bool)
		**out = **in
	}
	if in.RespVersion != nil {
		in, out := &in.RespVersion, &out.RespVersion
		*out = new(string)
		**out = **in
	}
	if in.SourceIps != nil {
		in, out := &in.SourceIps, &out.SourceIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubscriptionID != nil {
		in, out := &in.SubscriptionID, &out.SubscriptionID
		*out = new(float64)
		**out = **in
	}
	if in.SupportOssClusterAPI != nil {
		in, out := &in.SupportOssClusterAPI, &out.SupportOssClusterAPI
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ThroughputMeasurementBy != nil {
		in, out := &in.ThroughputMeasurementBy, &out.ThroughputMeasurementBy
		*out = new(string)
		**out = **in
	}
	if in.ThroughputMeasurementValue != nil {
		in, out := &in.ThroughputMeasurementValue, &out.ThroughputMeasurementValue
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseInitParameters.
func (in *DatabaseInitParameters) DeepCopy() *DatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseList) DeepCopyInto(out *DatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Database, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseList.
func (in *DatabaseList) DeepCopy() *DatabaseList {
	if in == nil {
		return nil
	}
	out := new(DatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObservation) DeepCopyInto(out *DatabaseObservation) {
	*out = *in
	if in.Alert != nil {
		in, out := &in.Alert, &out.Alert
		*out = make([]AlertObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AverageItemSizeInBytes != nil {
		in, out := &in.AverageItemSizeInBytes, &out.AverageItemSizeInBytes
		*out = new(float64)
		**out = **in
	}
	if in.ClientSSLCertificate != nil {
		in, out := &in.ClientSSLCertificate, &out.ClientSSLCertificate
		*out = new(string)
		**out = **in
	}
	if in.ClientTLSCertificates != nil {
		in, out := &in.ClientTLSCertificates, &out.ClientTLSCertificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DBID != nil {
		in, out := &in.DBID, &out.DBID
		*out = new(float64)
		**out = **in
	}
	if in.DataEviction != nil {
		in, out := &in.DataEviction, &out.DataEviction
		*out = new(string)
		**out = **in
	}
	if in.DataPersistence != nil {
		in, out := &in.DataPersistence, &out.DataPersistence
		*out = new(string)
		**out = **in
	}
	if in.DatasetSizeInGb != nil {
		in, out := &in.DatasetSizeInGb, &out.DatasetSizeInGb
		*out = new(float64)
		**out = **in
	}
	if in.EnableDefaultUser != nil {
		in, out := &in.EnableDefaultUser, &out.EnableDefaultUser
		*out = new(bool)
		**out = **in
	}
	if in.EnableTLS != nil {
		in, out := &in.EnableTLS, &out.EnableTLS
		*out = new(bool)
		**out = **in
	}
	if in.ExternalEndpointForOssClusterAPI != nil {
		in, out := &in.ExternalEndpointForOssClusterAPI, &out.ExternalEndpointForOssClusterAPI
		*out = new(bool)
		**out = **in
	}
	if in.HashingPolicy != nil {
		in, out := &in.HashingPolicy, &out.HashingPolicy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MemoryLimitInGb != nil {
		in, out := &in.MemoryLimitInGb, &out.MemoryLimitInGb
		*out = new(float64)
		**out = **in
	}
	if in.Modules != nil {
		in, out := &in.Modules, &out.Modules
		*out = make([]ModulesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PeriodicBackupPath != nil {
		in, out := &in.PeriodicBackupPath, &out.PeriodicBackupPath
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PrivateEndpoint != nil {
		in, out := &in.PrivateEndpoint, &out.PrivateEndpoint
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.PublicEndpoint != nil {
		in, out := &in.PublicEndpoint, &out.PublicEndpoint
		*out = new(string)
		**out = **in
	}
	if in.QueryPerformanceFactor != nil {
		in, out := &in.QueryPerformanceFactor, &out.QueryPerformanceFactor
		*out = new(string)
		**out = **in
	}
	if in.RemoteBackup != nil {
		in, out := &in.RemoteBackup, &out.RemoteBackup
		*out = make([]RemoteBackupObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ReplicaOf != nil {
		in, out := &in.ReplicaOf, &out.ReplicaOf
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = new(bool)
		**out = **in
	}
	if in.RespVersion != nil {
		in, out := &in.RespVersion, &out.RespVersion
		*out = new(string)
		**out = **in
	}
	if in.SourceIps != nil {
		in, out := &in.SourceIps, &out.SourceIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubscriptionID != nil {
		in, out := &in.SubscriptionID, &out.SubscriptionID
		*out = new(float64)
		**out = **in
	}
	if in.SupportOssClusterAPI != nil {
		in, out := &in.SupportOssClusterAPI, &out.SupportOssClusterAPI
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ThroughputMeasurementBy != nil {
		in, out := &in.ThroughputMeasurementBy, &out.ThroughputMeasurementBy
		*out = new(string)
		**out = **in
	}
	if in.ThroughputMeasurementValue != nil {
		in, out := &in.ThroughputMeasurementValue, &out.ThroughputMeasurementValue
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObservation.
func (in *DatabaseObservation) DeepCopy() *DatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseParameters) DeepCopyInto(out *DatabaseParameters) {
	*out = *in
	if in.Alert != nil {
		in, out := &in.Alert, &out.Alert
		*out = make([]AlertParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AverageItemSizeInBytes != nil {
		in, out := &in.AverageItemSizeInBytes, &out.AverageItemSizeInBytes
		*out = new(float64)
		**out = **in
	}
	if in.ClientSSLCertificate != nil {
		in, out := &in.ClientSSLCertificate, &out.ClientSSLCertificate
		*out = new(string)
		**out = **in
	}
	if in.ClientTLSCertificates != nil {
		in, out := &in.ClientTLSCertificates, &out.ClientTLSCertificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DataEviction != nil {
		in, out := &in.DataEviction, &out.DataEviction
		*out = new(string)
		**out = **in
	}
	if in.DataPersistence != nil {
		in, out := &in.DataPersistence, &out.DataPersistence
		*out = new(string)
		**out = **in
	}
	if in.DatasetSizeInGb != nil {
		in, out := &in.DatasetSizeInGb, &out.DatasetSizeInGb
		*out = new(float64)
		**out = **in
	}
	if in.EnableDefaultUser != nil {
		in, out := &in.EnableDefaultUser, &out.EnableDefaultUser
		*out = new(bool)
		**out = **in
	}
	if in.EnableTLS != nil {
		in, out := &in.EnableTLS, &out.EnableTLS
		*out = new(bool)
		**out = **in
	}
	if in.ExternalEndpointForOssClusterAPI != nil {
		in, out := &in.ExternalEndpointForOssClusterAPI, &out.ExternalEndpointForOssClusterAPI
		*out = new(bool)
		**out = **in
	}
	if in.HashingPolicy != nil {
		in, out := &in.HashingPolicy, &out.HashingPolicy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MemoryLimitInGb != nil {
		in, out := &in.MemoryLimitInGb, &out.MemoryLimitInGb
		*out = new(float64)
		**out = **in
	}
	if in.Modules != nil {
		in, out := &in.Modules, &out.Modules
		*out = make([]ModulesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PeriodicBackupPath != nil {
		in, out := &in.PeriodicBackupPath, &out.PeriodicBackupPath
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.QueryPerformanceFactor != nil {
		in, out := &in.QueryPerformanceFactor, &out.QueryPerformanceFactor
		*out = new(string)
		**out = **in
	}
	if in.RemoteBackup != nil {
		in, out := &in.RemoteBackup, &out.RemoteBackup
		*out = make([]RemoteBackupParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ReplicaOf != nil {
		in, out := &in.ReplicaOf, &out.ReplicaOf
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = new(bool)
		**out = **in
	}
	if in.RespVersion != nil {
		in, out := &in.RespVersion, &out.RespVersion
		*out = new(string)
		**out = **in
	}
	if in.SourceIps != nil {
		in, out := &in.SourceIps, &out.SourceIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubscriptionID != nil {
		in, out := &in.SubscriptionID, &out.SubscriptionID
		*out = new(float64)
		**out = **in
	}
	if in.SupportOssClusterAPI != nil {
		in, out := &in.SupportOssClusterAPI, &out.SupportOssClusterAPI
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ThroughputMeasurementBy != nil {
		in, out := &in.ThroughputMeasurementBy, &out.ThroughputMeasurementBy
		*out = new(string)
		**out = **in
	}
	if in.ThroughputMeasurementValue != nil {
		in, out := &in.ThroughputMeasurementValue, &out.ThroughputMeasurementValue
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseParameters.
func (in *DatabaseParameters) DeepCopy() *DatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpec) DeepCopyInto(out *DatabaseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpec.
func (in *DatabaseSpec) DeepCopy() *DatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseStatus) DeepCopyInto(out *DatabaseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseStatus.
func (in *DatabaseStatus) DeepCopy() *DatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ModulesInitParameters) DeepCopyInto(out *ModulesInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ModulesInitParameters.
func (in *ModulesInitParameters) DeepCopy() *ModulesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ModulesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ModulesObservation) DeepCopyInto(out *ModulesObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ModulesObservation.
func (in *ModulesObservation) DeepCopy() *ModulesObservation {
	if in == nil {
		return nil
	}
	out := new(ModulesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ModulesParameters) DeepCopyInto(out *ModulesParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ModulesParameters.
func (in *ModulesParameters) DeepCopy() *ModulesParameters {
	if in == nil {
		return nil
	}
	out := new(ModulesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Peering) DeepCopyInto(out *Peering) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Peering.
func (in *Peering) DeepCopy() *Peering {
	if in == nil {
		return nil
	}
	out := new(Peering)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Peering) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PeeringInitParameters) DeepCopyInto(out *PeeringInitParameters) {
	*out = *in
	if in.AwsAccountID != nil {
		in, out := &in.AwsAccountID, &out.AwsAccountID
		*out = new(string)
		**out = **in
	}
	if in.GCPNetworkName != nil {
		in, out := &in.GCPNetworkName, &out.GCPNetworkName
		*out = new(string)
		**out = **in
	}
	if in.GCPProjectID != nil {
		in, out := &in.GCPProjectID, &out.GCPProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProviderName != nil {
		in, out := &in.ProviderName, &out.ProviderName
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionID != nil {
		in, out := &in.SubscriptionID, &out.SubscriptionID
		*out = new(string)
		**out = **in
	}
	if in.VPCCidr != nil {
		in, out := &in.VPCCidr, &out.VPCCidr
		*out = new(string)
		**out = **in
	}
	if in.VPCCidrs != nil {
		in, out := &in.VPCCidrs, &out.VPCCidrs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PeeringInitParameters.
func (in *PeeringInitParameters) DeepCopy() *PeeringInitParameters {
	if in == nil {
		return nil
	}
	out := new(PeeringInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PeeringList) DeepCopyInto(out *PeeringList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Peering, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PeeringList.
func (in *PeeringList) DeepCopy() *PeeringList {
	if in == nil {
		return nil
	}
	out := new(PeeringList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PeeringList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PeeringObservation) DeepCopyInto(out *PeeringObservation) {
	*out = *in
	if in.AwsAccountID != nil {
		in, out := &in.AwsAccountID, &out.AwsAccountID
		*out = new(string)
		**out = **in
	}
	if in.AwsPeeringID != nil {
		in, out := &in.AwsPeeringID, &out.AwsPeeringID
		*out = new(string)
		**out = **in
	}
	if in.GCPNetworkName != nil {
		in, out := &in.GCPNetworkName, &out.GCPNetworkName
		*out = new(string)
		**out = **in
	}
	if in.GCPPeeringID != nil {
		in, out := &in.GCPPeeringID, &out.GCPPeeringID
		*out = new(string)
		**out = **in
	}
	if in.GCPProjectID != nil {
		in, out := &in.GCPProjectID, &out.GCPProjectID
		*out = new(string)
		**out = **in
	}
	if in.GCPRedisNetworkName != nil {
		in, out := &in.GCPRedisNetworkName, &out.GCPRedisNetworkName
		*out = new(string)
		**out = **in
	}
	if in.GCPRedisProjectID != nil {
		in, out := &in.GCPRedisProjectID, &out.GCPRedisProjectID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProviderName != nil {
		in, out := &in.ProviderName, &out.ProviderName
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionID != nil {
		in, out := &in.SubscriptionID, &out.SubscriptionID
		*out = new(string)
		**out = **in
	}
	if in.VPCCidr != nil {
		in, out := &in.VPCCidr, &out.VPCCidr
		*out = new(string)
		**out = **in
	}
	if in.VPCCidrs != nil {
		in, out := &in.VPCCidrs, &out.VPCCidrs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PeeringObservation.
func (in *PeeringObservation) DeepCopy() *PeeringObservation {
	if in == nil {
		return nil
	}
	out := new(PeeringObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PeeringParameters) DeepCopyInto(out *PeeringParameters) {
	*out = *in
	if in.AwsAccountID != nil {
		in, out := &in.AwsAccountID, &out.AwsAccountID
		*out = new(string)
		**out = **in
	}
	if in.GCPNetworkName != nil {
		in, out := &in.GCPNetworkName, &out.GCPNetworkName
		*out = new(string)
		**out = **in
	}
	if in.GCPProjectID != nil {
		in, out := &in.GCPProjectID, &out.GCPProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProviderName != nil {
		in, out := &in.ProviderName, &out.ProviderName
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionID != nil {
		in, out := &in.SubscriptionID, &out.SubscriptionID
		*out = new(string)
		**out = **in
	}
	if in.VPCCidr != nil {
		in, out := &in.VPCCidr, &out.VPCCidr
		*out = new(string)
		**out = **in
	}
	if in.VPCCidrs != nil {
		in, out := &in.VPCCidrs, &out.VPCCidrs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PeeringParameters.
func (in *PeeringParameters) DeepCopy() *PeeringParameters {
	if in == nil {
		return nil
	}
	out := new(PeeringParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PeeringSpec) DeepCopyInto(out *PeeringSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PeeringSpec.
func (in *PeeringSpec) DeepCopy() *PeeringSpec {
	if in == nil {
		return nil
	}
	out := new(PeeringSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PeeringStatus) DeepCopyInto(out *PeeringStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PeeringStatus.
func (in *PeeringStatus) DeepCopy() *PeeringStatus {
	if in == nil {
		return nil
	}
	out := new(PeeringStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteBackupInitParameters) DeepCopyInto(out *RemoteBackupInitParameters) {
	*out = *in
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(string)
		**out = **in
	}
	if in.StoragePath != nil {
		in, out := &in.StoragePath, &out.StoragePath
		*out = new(string)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.TimeUtc != nil {
		in, out := &in.TimeUtc, &out.TimeUtc
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteBackupInitParameters.
func (in *RemoteBackupInitParameters) DeepCopy() *RemoteBackupInitParameters {
	if in == nil {
		return nil
	}
	out := new(RemoteBackupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteBackupObservation) DeepCopyInto(out *RemoteBackupObservation) {
	*out = *in
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(string)
		**out = **in
	}
	if in.StoragePath != nil {
		in, out := &in.StoragePath, &out.StoragePath
		*out = new(string)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.TimeUtc != nil {
		in, out := &in.TimeUtc, &out.TimeUtc
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteBackupObservation.
func (in *RemoteBackupObservation) DeepCopy() *RemoteBackupObservation {
	if in == nil {
		return nil
	}
	out := new(RemoteBackupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteBackupParameters) DeepCopyInto(out *RemoteBackupParameters) {
	*out = *in
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(string)
		**out = **in
	}
	if in.StoragePath != nil {
		in, out := &in.StoragePath, &out.StoragePath
		*out = new(string)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.TimeUtc != nil {
		in, out := &in.TimeUtc, &out.TimeUtc
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteBackupParameters.
func (in *RemoteBackupParameters) DeepCopy() *RemoteBackupParameters {
	if in == nil {
		return nil
	}
	out := new(RemoteBackupParameters)
	in.DeepCopyInto(out)
	return out
}
