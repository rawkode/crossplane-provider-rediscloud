// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PeeringInitParameters struct {

	// AWS account ID that the VPC to be peered lives in. Modifying this attribute will force creation of a new resource.
	// AWS account id that the VPC to be peered lives in
	AwsAccountID *string `json:"awsAccountId,omitempty" tf:"aws_account_id,omitempty"`

	// The name of the network to be peered. Modifying this attribute will force creation of a new resource.
	// The name of the network to be peered
	GCPNetworkName *string `json:"gcpNetworkName,omitempty" tf:"gcp_network_name,omitempty"`

	// GCP project ID that the VPC to be peered lives in. Modifying this attribute will force creation of a new resource.
	// GCP project ID that the VPC to be peered lives in
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// The cloud provider to use with the vpc peering, (either AWS or GCP). Default: ‘AWS’. Modifying this attribute will force creation of a new resource.
	// The cloud provider to use with the vpc peering, (either `AWS` or `GCP`)
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// AWS Region that the VPC to be peered lives in. Modifying this attribute will force creation of a new resource.
	// AWS Region that the VPC to be peered lives in
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A valid subscription predefined in the current account. Modifying this attribute will force creation of a new resource.
	// A valid subscription predefined in the current account
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// CIDR range of the VPC to be peered. Either this or vpc_cidrs must be specified. Modifying this attribute will force creation of a new resource.
	// CIDR range of the VPC to be peered
	VPCCidr *string `json:"vpcCidr,omitempty" tf:"vpc_cidr,omitempty"`

	// CIDR ranges of the VPC to be peered. Either this or vpc_cidr must be specified. Modifying this attribute will force creation of a new resource.
	// CIDR ranges of the VPC to be peered
	// +listType=set
	VPCCidrs []*string `json:"vpcCidrs,omitempty" tf:"vpc_cidrs,omitempty"`

	// Identifier of the VPC to be peered. Modifying this attribute will force creation of a new resource.
	// Identifier of the VPC to be peered
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type PeeringObservation struct {

	// AWS account ID that the VPC to be peered lives in. Modifying this attribute will force creation of a new resource.
	// AWS account id that the VPC to be peered lives in
	AwsAccountID *string `json:"awsAccountId,omitempty" tf:"aws_account_id,omitempty"`

	// Identifier of the AWS cloud peering
	// Identifier of the AWS cloud peering
	AwsPeeringID *string `json:"awsPeeringId,omitempty" tf:"aws_peering_id,omitempty"`

	// The name of the network to be peered. Modifying this attribute will force creation of a new resource.
	// The name of the network to be peered
	GCPNetworkName *string `json:"gcpNetworkName,omitempty" tf:"gcp_network_name,omitempty"`

	// Identifier of the cloud peering
	// Identifier of the cloud peering
	GCPPeeringID *string `json:"gcpPeeringId,omitempty" tf:"gcp_peering_id,omitempty"`

	// GCP project ID that the VPC to be peered lives in. Modifying this attribute will force creation of a new resource.
	// GCP project ID that the VPC to be peered lives in
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// The name of the Redis Enterprise Cloud network to be peered
	// The name of the Redis Enterprise Cloud network to be peered
	GCPRedisNetworkName *string `json:"gcpRedisNetworkName,omitempty" tf:"gcp_redis_network_name,omitempty"`

	// Identifier of the Redis Enterprise Cloud GCP project to be peered
	// Identifier of the Redis Enterprise Cloud GCP project to be peered
	GCPRedisProjectID *string `json:"gcpRedisProjectId,omitempty" tf:"gcp_redis_project_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The cloud provider to use with the vpc peering, (either AWS or GCP). Default: ‘AWS’. Modifying this attribute will force creation of a new resource.
	// The cloud provider to use with the vpc peering, (either `AWS` or `GCP`)
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// AWS Region that the VPC to be peered lives in. Modifying this attribute will force creation of a new resource.
	// AWS Region that the VPC to be peered lives in
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// initiating-request, pending-acceptance, active, inactive or failed.
	// Current status of the account - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// A valid subscription predefined in the current account. Modifying this attribute will force creation of a new resource.
	// A valid subscription predefined in the current account
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// CIDR range of the VPC to be peered. Either this or vpc_cidrs must be specified. Modifying this attribute will force creation of a new resource.
	// CIDR range of the VPC to be peered
	VPCCidr *string `json:"vpcCidr,omitempty" tf:"vpc_cidr,omitempty"`

	// CIDR ranges of the VPC to be peered. Either this or vpc_cidr must be specified. Modifying this attribute will force creation of a new resource.
	// CIDR ranges of the VPC to be peered
	// +listType=set
	VPCCidrs []*string `json:"vpcCidrs,omitempty" tf:"vpc_cidrs,omitempty"`

	// Identifier of the VPC to be peered. Modifying this attribute will force creation of a new resource.
	// Identifier of the VPC to be peered
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type PeeringParameters struct {

	// AWS account ID that the VPC to be peered lives in. Modifying this attribute will force creation of a new resource.
	// AWS account id that the VPC to be peered lives in
	// +kubebuilder:validation:Optional
	AwsAccountID *string `json:"awsAccountId,omitempty" tf:"aws_account_id,omitempty"`

	// The name of the network to be peered. Modifying this attribute will force creation of a new resource.
	// The name of the network to be peered
	// +kubebuilder:validation:Optional
	GCPNetworkName *string `json:"gcpNetworkName,omitempty" tf:"gcp_network_name,omitempty"`

	// GCP project ID that the VPC to be peered lives in. Modifying this attribute will force creation of a new resource.
	// GCP project ID that the VPC to be peered lives in
	// +kubebuilder:validation:Optional
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// The cloud provider to use with the vpc peering, (either AWS or GCP). Default: ‘AWS’. Modifying this attribute will force creation of a new resource.
	// The cloud provider to use with the vpc peering, (either `AWS` or `GCP`)
	// +kubebuilder:validation:Optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// AWS Region that the VPC to be peered lives in. Modifying this attribute will force creation of a new resource.
	// AWS Region that the VPC to be peered lives in
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A valid subscription predefined in the current account. Modifying this attribute will force creation of a new resource.
	// A valid subscription predefined in the current account
	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// CIDR range of the VPC to be peered. Either this or vpc_cidrs must be specified. Modifying this attribute will force creation of a new resource.
	// CIDR range of the VPC to be peered
	// +kubebuilder:validation:Optional
	VPCCidr *string `json:"vpcCidr,omitempty" tf:"vpc_cidr,omitempty"`

	// CIDR ranges of the VPC to be peered. Either this or vpc_cidr must be specified. Modifying this attribute will force creation of a new resource.
	// CIDR ranges of the VPC to be peered
	// +kubebuilder:validation:Optional
	// +listType=set
	VPCCidrs []*string `json:"vpcCidrs,omitempty" tf:"vpc_cidrs,omitempty"`

	// Identifier of the VPC to be peered. Modifying this attribute will force creation of a new resource.
	// Identifier of the VPC to be peered
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

// PeeringSpec defines the desired state of Peering
type PeeringSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PeeringParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PeeringInitParameters `json:"initProvider,omitempty"`
}

// PeeringStatus defines the observed state of Peering.
type PeeringStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PeeringObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Peering is the Schema for the Peerings API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rediscloud}
type Peering struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscriptionId) || (has(self.initProvider) && has(self.initProvider.subscriptionId))",message="spec.forProvider.subscriptionId is a required parameter"
	Spec   PeeringSpec   `json:"spec"`
	Status PeeringStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PeeringList contains a list of Peerings
type PeeringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Peering `json:"items"`
}

// Repository type metadata.
var (
	Peering_Kind             = "Peering"
	Peering_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Peering_Kind}.String()
	Peering_KindAPIVersion   = Peering_Kind + "." + CRDGroupVersion.String()
	Peering_GroupVersionKind = CRDGroupVersion.WithKind(Peering_Kind)
)

func init() {
	SchemeBuilder.Register(&Peering{}, &PeeringList{})
}
