// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubscriptionInitParameters struct {

	// A meaningful name to identify the subscription
	// A meaningful name to identify the subscription
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Payment method for the requested subscription. If credit-card is specified, the payment method id must be defined. This information is only used when creating a new subscription and any changes will be ignored after this.
	PaymentMethod *string `json:"paymentMethod,omitempty" tf:"payment_method,omitempty"`

	// If the plan is paid, this must be a valid payment method pre-defined in the current account
	// The identifier of the method which will be charged for this subscription. Not required for free plans
	PaymentMethodID *float64 `json:"paymentMethodId,omitempty" tf:"payment_method_id,omitempty"`

	// The plan to which this subscription will belong
	// The identifier of the plan to template the subscription
	PlanID *float64 `json:"planId,omitempty" tf:"plan_id,omitempty"`
}

type SubscriptionObservation struct {

	// When the subscription was created
	// The date/time this subscription was created
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A meaningful name to identify the subscription
	// A meaningful name to identify the subscription
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Payment method for the requested subscription. If credit-card is specified, the payment method id must be defined. This information is only used when creating a new subscription and any changes will be ignored after this.
	PaymentMethod *string `json:"paymentMethod,omitempty" tf:"payment_method,omitempty"`

	// If the plan is paid, this must be a valid payment method pre-defined in the current account
	// The identifier of the method which will be charged for this subscription. Not required for free plans
	PaymentMethodID *float64 `json:"paymentMethodId,omitempty" tf:"payment_method_id,omitempty"`

	// The plan to which this subscription will belong
	// The identifier of the plan to template the subscription
	PlanID *float64 `json:"planId,omitempty" tf:"plan_id,omitempty"`

	// The current status of the subscription
	// The status of this subscription
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type SubscriptionParameters struct {

	// A meaningful name to identify the subscription
	// A meaningful name to identify the subscription
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Payment method for the requested subscription. If credit-card is specified, the payment method id must be defined. This information is only used when creating a new subscription and any changes will be ignored after this.
	// +kubebuilder:validation:Optional
	PaymentMethod *string `json:"paymentMethod,omitempty" tf:"payment_method,omitempty"`

	// If the plan is paid, this must be a valid payment method pre-defined in the current account
	// The identifier of the method which will be charged for this subscription. Not required for free plans
	// +kubebuilder:validation:Optional
	PaymentMethodID *float64 `json:"paymentMethodId,omitempty" tf:"payment_method_id,omitempty"`

	// The plan to which this subscription will belong
	// The identifier of the plan to template the subscription
	// +kubebuilder:validation:Optional
	PlanID *float64 `json:"planId,omitempty" tf:"plan_id,omitempty"`
}

// SubscriptionSpec defines the desired state of Subscription
type SubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubscriptionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SubscriptionInitParameters `json:"initProvider,omitempty"`
}

// SubscriptionStatus defines the observed state of Subscription.
type SubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Subscription is the Schema for the Subscriptions API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rediscloud}
type Subscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.planId) || (has(self.initProvider) && has(self.initProvider.planId))",message="spec.forProvider.planId is a required parameter"
	Spec   SubscriptionSpec   `json:"spec"`
	Status SubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionList contains a list of Subscriptions
type SubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Subscription `json:"items"`
}

// Repository type metadata.
var (
	Subscription_Kind             = "Subscription"
	Subscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Subscription_Kind}.String()
	Subscription_KindAPIVersion   = Subscription_Kind + "." + CRDGroupVersion.String()
	Subscription_GroupVersionKind = CRDGroupVersion.WithKind(Subscription_Kind)
)

func init() {
	SchemeBuilder.Register(&Subscription{}, &SubscriptionList{})
}
