// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertInitParameters struct {

	// The alert name.
	// Alert name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The alert value.
	// Alert value
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type AlertObservation struct {

	// The alert name.
	// Alert name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The alert value.
	// Alert value
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type AlertParameters struct {

	// The alert name.
	// Alert name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The alert value.
	// Alert value
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type DatabaseInitParameters struct {

	// A block defining Redis database alert. Can be specified multiple times. Documented below.
	// Set of alerts to enable on the database
	Alert []AlertInitParameters `json:"alert,omitempty" tf:"alert,omitempty"`

	// A list of TLS/SSL certificates (public keys) with new line characters replaced by \n.
	ClientTLSCertificates []*string `json:"clientTlsCertificates,omitempty" tf:"client_tls_certificates,omitempty"`

	// Data items eviction method. Either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru'.
	// The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
	DataEviction *string `json:"dataEviction,omitempty" tf:"data_eviction,omitempty"`

	// Rate of database data persistence (in persistent storage). Either: 'none', 'aof-every-1-second', 'aof-every-write', 'snapshot-every-1-hour', 'snapshot-every-6-hours' or 'snapshot-every-12-hours'.
	// Rate of database data persistence (in persistent storage).
	DataPersistence *string `json:"dataPersistence,omitempty" tf:"data_persistence,omitempty"`

	// Only used with Pay-As-You-Go databases. Distributes database data to different cloud instances. Default false.
	// Distributes database data to different cloud instances
	EnableDatabaseClustering *bool `json:"enableDatabaseClustering,omitempty" tf:"enable_database_clustering,omitempty"`

	// When true enables connecting to the database with the default user. Default true. If set to false, any value for password will be ignored.
	// When 'true', enables connecting to the database with the 'default' user. Default: 'true'
	EnableDefaultUser *bool `json:"enableDefaultUser,omitempty" tf:"enable_default_user,omitempty"`

	// Whether to enable features restricted to Pay-As-You-Go legacy databases. It is not supported for new databases. Default false.
	// Enable features for PAYG databases
	EnablePaygFeatures *bool `json:"enablePaygFeatures,omitempty" tf:"enable_payg_features,omitempty"`

	// Only used with Pay-As-You-Go databases. Use TLS for authentication. Default false.
	// Use TLS for authentication
	EnableTLS *bool `json:"enableTls,omitempty" tf:"enable_tls,omitempty"`

	// Only used with Pay-As-You-Go databases. Should use the external endpoint for open-source (OSS) Cluster API. Default false.
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterAPI *bool `json:"externalEndpointForOssClusterApi,omitempty" tf:"external_endpoint_for_oss_cluster_api,omitempty"`

	// Only used with Pay-As-You-Go databases. Maximum memory usage for the database.
	// Maximum memory usage for this specific database
	MemoryLimitInGb *float64 `json:"memoryLimitInGb,omitempty" tf:"memory_limit_in_gb,omitempty"`

	// A list of modules objects, documented below. Modifying this attribute will force creation of a new resource.
	// Modules to be provisioned in the database
	Modules []ModulesInitParameters `json:"modules,omitempty" tf:"modules,omitempty"`

	// A meaningful name to identify the database.
	// A meaningful name to identify the database
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Password to access the database. If not specified, a random 32 character long alphanumeric password will be automatically generated.
	// Password used to access the database. If left empty, the password will be generated automatically
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// If specified, automatic backups will be every 24 hours and immediate backups to this path will be allowed upon request.
	// Path that will be used to store database backup files
	PeriodicBackupPath *string `json:"periodicBackupPath,omitempty" tf:"periodic_backup_path,omitempty"`

	// Database protocol. 'stack' is a suite of all Redis' data modules. Default: 'stack'. Either: 'redis', 'memcached' or 'stack'. 'redis' is only used with Pay-As-You-Go databases.
	// The protocol that will be used to access the database, (either 'redis', 'memcached' or 'stack')
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Only used with Pay-As-You-Go databases. Shard regex rules. Relevant only for a sharded database.
	// Shard regex rules. Relevant only for a sharded database. Supported only for 'Pay-As-You-Go' subscriptions
	RegexRules []*string `json:"regexRules,omitempty" tf:"regex_rules,omitempty"`

	// If specified, this database will be a replica of the specified Redis databases provided, documented below.
	// Details of database replication
	Replica []ReplicaInitParameters `json:"replica,omitempty" tf:"replica,omitempty"`

	// Databases replication. Either: 'true' or 'false'.
	// Database's replication
	Replication *bool `json:"replication,omitempty" tf:"replication,omitempty"`

	// RESP version must be compatible with the Redis version.
	// RESP version must be compatible with Redis version.
	RespVersion *string `json:"respVersion,omitempty" tf:"resp_version,omitempty"`

	// List of source IP addresses or subnet masks. If specified, Redis clients will be able to connect to this database only from within the specified source IP address ranges. Example value: ['192.168.10.0/32', '192.168.12.0/24'].
	// Set of CIDR addresses to allow access to the database
	SourceIps []*string `json:"sourceIps,omitempty" tf:"source_ips,omitempty"`

	// The ID of the subscription to create the database in. Modifying this attribute will force creation of a new resource.
	// Identifier of the essentials subscription
	SubscriptionID *float64 `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// Only used with Pay-As-You-Go databases. Support Redis open-source (OSS) Cluster API. Default false.
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterAPI *bool `json:"supportOssClusterApi,omitempty" tf:"support_oss_cluster_api,omitempty"`

	// A string/string map of tags to associate with this database. Note that all keys and values must be lowercase.
	// Tags for database management
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type DatabaseObservation struct {

	// When this database was activated.
	// When this database was activated
	ActivatedOn *string `json:"activatedOn,omitempty" tf:"activated_on,omitempty"`

	// A block defining Redis database alert. Can be specified multiple times. Documented below.
	// Set of alerts to enable on the database
	Alert []AlertObservation `json:"alert,omitempty" tf:"alert,omitempty"`

	// A list of TLS/SSL certificates (public keys) with new line characters replaced by \n.
	ClientTLSCertificates []*string `json:"clientTlsCertificates,omitempty" tf:"client_tls_certificates,omitempty"`

	// The Cloud Provider hosting this database.
	// The Cloud Provider hosting this database
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// Identifier of the database created
	DBID *float64 `json:"dbId,omitempty" tf:"db_id,omitempty"`

	// Data items eviction method. Either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru'.
	// The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
	DataEviction *string `json:"dataEviction,omitempty" tf:"data_eviction,omitempty"`

	// Rate of database data persistence (in persistent storage). Either: 'none', 'aof-every-1-second', 'aof-every-write', 'snapshot-every-1-hour', 'snapshot-every-6-hours' or 'snapshot-every-12-hours'.
	// Rate of database data persistence (in persistent storage).
	DataPersistence *string `json:"dataPersistence,omitempty" tf:"data_persistence,omitempty"`

	// Only used with Pay-As-You-Go databases. Distributes database data to different cloud instances. Default false.
	// Distributes database data to different cloud instances
	EnableDatabaseClustering *bool `json:"enableDatabaseClustering,omitempty" tf:"enable_database_clustering,omitempty"`

	// When true enables connecting to the database with the default user. Default true. If set to false, any value for password will be ignored.
	// When 'true', enables connecting to the database with the 'default' user. Default: 'true'
	EnableDefaultUser *bool `json:"enableDefaultUser,omitempty" tf:"enable_default_user,omitempty"`

	// Whether to enable features restricted to Pay-As-You-Go legacy databases. It is not supported for new databases. Default false.
	// Enable features for PAYG databases
	EnablePaygFeatures *bool `json:"enablePaygFeatures,omitempty" tf:"enable_payg_features,omitempty"`

	// Only used with Pay-As-You-Go databases. Use TLS for authentication. Default false.
	// Use TLS for authentication
	EnableTLS *bool `json:"enableTls,omitempty" tf:"enable_tls,omitempty"`

	// Only used with Pay-As-You-Go databases. Should use the external endpoint for open-source (OSS) Cluster API. Default false.
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterAPI *bool `json:"externalEndpointForOssClusterApi,omitempty" tf:"external_endpoint_for_oss_cluster_api,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Only used with Pay-As-You-Go databases. Maximum memory usage for the database.
	// Maximum memory usage for this specific database
	MemoryLimitInGb *float64 `json:"memoryLimitInGb,omitempty" tf:"memory_limit_in_gb,omitempty"`

	// A list of modules objects, documented below. Modifying this attribute will force creation of a new resource.
	// Modules to be provisioned in the database
	Modules []ModulesObservation `json:"modules,omitempty" tf:"modules,omitempty"`

	// A meaningful name to identify the database.
	// A meaningful name to identify the database
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// If specified, automatic backups will be every 24 hours and immediate backups to this path will be allowed upon request.
	// Path that will be used to store database backup files
	PeriodicBackupPath *string `json:"periodicBackupPath,omitempty" tf:"periodic_backup_path,omitempty"`

	// Private endpoint to access the database.
	// Private endpoint to access the database
	PrivateEndpoint *string `json:"privateEndpoint,omitempty" tf:"private_endpoint,omitempty"`

	// Database protocol. 'stack' is a suite of all Redis' data modules. Default: 'stack'. Either: 'redis', 'memcached' or 'stack'. 'redis' is only used with Pay-As-You-Go databases.
	// The protocol that will be used to access the database, (either 'redis', 'memcached' or 'stack')
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Public endpoint to access the database.
	// Public endpoint to access the database
	PublicEndpoint *string `json:"publicEndpoint,omitempty" tf:"public_endpoint,omitempty"`

	// The compliance Redis version of the database.
	// The compliance level (redis version) of this database
	RedisVersionCompliance *string `json:"redisVersionCompliance,omitempty" tf:"redis_version_compliance,omitempty"`

	// Only used with Pay-As-You-Go databases. Shard regex rules. Relevant only for a sharded database.
	// Shard regex rules. Relevant only for a sharded database. Supported only for 'Pay-As-You-Go' subscriptions
	RegexRules []*string `json:"regexRules,omitempty" tf:"regex_rules,omitempty"`

	// The region within the Cloud Provider where this database is hosted.
	// The region within the Cloud Provider where this database is hosted
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// If specified, this database will be a replica of the specified Redis databases provided, documented below.
	// Details of database replication
	Replica []ReplicaObservation `json:"replica,omitempty" tf:"replica,omitempty"`

	// Databases replication. Either: 'true' or 'false'.
	// Database's replication
	Replication *bool `json:"replication,omitempty" tf:"replication,omitempty"`

	// RESP version must be compatible with the Redis version.
	// RESP version must be compatible with Redis version.
	RespVersion *string `json:"respVersion,omitempty" tf:"resp_version,omitempty"`

	// List of source IP addresses or subnet masks. If specified, Redis clients will be able to connect to this database only from within the specified source IP address ranges. Example value: ['192.168.10.0/32', '192.168.12.0/24'].
	// Set of CIDR addresses to allow access to the database
	SourceIps []*string `json:"sourceIps,omitempty" tf:"source_ips,omitempty"`

	// The ID of the subscription to create the database in. Modifying this attribute will force creation of a new resource.
	// Identifier of the essentials subscription
	SubscriptionID *float64 `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// Only used with Pay-As-You-Go databases. Support Redis open-source (OSS) Cluster API. Default false.
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterAPI *bool `json:"supportOssClusterApi,omitempty" tf:"support_oss_cluster_api,omitempty"`

	// A string/string map of tags to associate with this database. Note that all keys and values must be lowercase.
	// Tags for database management
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type DatabaseParameters struct {

	// A block defining Redis database alert. Can be specified multiple times. Documented below.
	// Set of alerts to enable on the database
	// +kubebuilder:validation:Optional
	Alert []AlertParameters `json:"alert,omitempty" tf:"alert,omitempty"`

	// A list of TLS/SSL certificates (public keys) with new line characters replaced by \n.
	// +kubebuilder:validation:Optional
	ClientTLSCertificates []*string `json:"clientTlsCertificates,omitempty" tf:"client_tls_certificates,omitempty"`

	// Data items eviction method. Either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru'.
	// The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
	// +kubebuilder:validation:Optional
	DataEviction *string `json:"dataEviction,omitempty" tf:"data_eviction,omitempty"`

	// Rate of database data persistence (in persistent storage). Either: 'none', 'aof-every-1-second', 'aof-every-write', 'snapshot-every-1-hour', 'snapshot-every-6-hours' or 'snapshot-every-12-hours'.
	// Rate of database data persistence (in persistent storage).
	// +kubebuilder:validation:Optional
	DataPersistence *string `json:"dataPersistence,omitempty" tf:"data_persistence,omitempty"`

	// Only used with Pay-As-You-Go databases. Distributes database data to different cloud instances. Default false.
	// Distributes database data to different cloud instances
	// +kubebuilder:validation:Optional
	EnableDatabaseClustering *bool `json:"enableDatabaseClustering,omitempty" tf:"enable_database_clustering,omitempty"`

	// When true enables connecting to the database with the default user. Default true. If set to false, any value for password will be ignored.
	// When 'true', enables connecting to the database with the 'default' user. Default: 'true'
	// +kubebuilder:validation:Optional
	EnableDefaultUser *bool `json:"enableDefaultUser,omitempty" tf:"enable_default_user,omitempty"`

	// Whether to enable features restricted to Pay-As-You-Go legacy databases. It is not supported for new databases. Default false.
	// Enable features for PAYG databases
	// +kubebuilder:validation:Optional
	EnablePaygFeatures *bool `json:"enablePaygFeatures,omitempty" tf:"enable_payg_features,omitempty"`

	// Only used with Pay-As-You-Go databases. Use TLS for authentication. Default false.
	// Use TLS for authentication
	// +kubebuilder:validation:Optional
	EnableTLS *bool `json:"enableTls,omitempty" tf:"enable_tls,omitempty"`

	// Only used with Pay-As-You-Go databases. Should use the external endpoint for open-source (OSS) Cluster API. Default false.
	// Should use the external endpoint for open-source (OSS) Cluster API
	// +kubebuilder:validation:Optional
	ExternalEndpointForOssClusterAPI *bool `json:"externalEndpointForOssClusterApi,omitempty" tf:"external_endpoint_for_oss_cluster_api,omitempty"`

	// Only used with Pay-As-You-Go databases. Maximum memory usage for the database.
	// Maximum memory usage for this specific database
	// +kubebuilder:validation:Optional
	MemoryLimitInGb *float64 `json:"memoryLimitInGb,omitempty" tf:"memory_limit_in_gb,omitempty"`

	// A list of modules objects, documented below. Modifying this attribute will force creation of a new resource.
	// Modules to be provisioned in the database
	// +kubebuilder:validation:Optional
	Modules []ModulesParameters `json:"modules,omitempty" tf:"modules,omitempty"`

	// A meaningful name to identify the database.
	// A meaningful name to identify the database
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Password to access the database. If not specified, a random 32 character long alphanumeric password will be automatically generated.
	// Password used to access the database. If left empty, the password will be generated automatically
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// If specified, automatic backups will be every 24 hours and immediate backups to this path will be allowed upon request.
	// Path that will be used to store database backup files
	// +kubebuilder:validation:Optional
	PeriodicBackupPath *string `json:"periodicBackupPath,omitempty" tf:"periodic_backup_path,omitempty"`

	// Database protocol. 'stack' is a suite of all Redis' data modules. Default: 'stack'. Either: 'redis', 'memcached' or 'stack'. 'redis' is only used with Pay-As-You-Go databases.
	// The protocol that will be used to access the database, (either 'redis', 'memcached' or 'stack')
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Only used with Pay-As-You-Go databases. Shard regex rules. Relevant only for a sharded database.
	// Shard regex rules. Relevant only for a sharded database. Supported only for 'Pay-As-You-Go' subscriptions
	// +kubebuilder:validation:Optional
	RegexRules []*string `json:"regexRules,omitempty" tf:"regex_rules,omitempty"`

	// If specified, this database will be a replica of the specified Redis databases provided, documented below.
	// Details of database replication
	// +kubebuilder:validation:Optional
	Replica []ReplicaParameters `json:"replica,omitempty" tf:"replica,omitempty"`

	// Databases replication. Either: 'true' or 'false'.
	// Database's replication
	// +kubebuilder:validation:Optional
	Replication *bool `json:"replication,omitempty" tf:"replication,omitempty"`

	// RESP version must be compatible with the Redis version.
	// RESP version must be compatible with Redis version.
	// +kubebuilder:validation:Optional
	RespVersion *string `json:"respVersion,omitempty" tf:"resp_version,omitempty"`

	// List of source IP addresses or subnet masks. If specified, Redis clients will be able to connect to this database only from within the specified source IP address ranges. Example value: ['192.168.10.0/32', '192.168.12.0/24'].
	// Set of CIDR addresses to allow access to the database
	// +kubebuilder:validation:Optional
	SourceIps []*string `json:"sourceIps,omitempty" tf:"source_ips,omitempty"`

	// The ID of the subscription to create the database in. Modifying this attribute will force creation of a new resource.
	// Identifier of the essentials subscription
	// +kubebuilder:validation:Optional
	SubscriptionID *float64 `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// Only used with Pay-As-You-Go databases. Support Redis open-source (OSS) Cluster API. Default false.
	// Support Redis open-source (OSS) Cluster API
	// +kubebuilder:validation:Optional
	SupportOssClusterAPI *bool `json:"supportOssClusterApi,omitempty" tf:"support_oss_cluster_api,omitempty"`

	// A string/string map of tags to associate with this database. Note that all keys and values must be lowercase.
	// Tags for database management
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ModulesInitParameters struct {

	// A meaningful name to identify the database.
	Name *string `json:"name,omitempty" tf:"name"`
}

type ModulesObservation struct {

	// A meaningful name to identify the database.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ModulesParameters struct {

	// A meaningful name to identify the database.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type ReplicaInitParameters struct {

	// The sources to replicate. Documented below.
	// A source database to replicate here
	SyncSource []SyncSourceInitParameters `json:"syncSource,omitempty" tf:"sync_source,omitempty"`
}

type ReplicaObservation struct {

	// The sources to replicate. Documented below.
	// A source database to replicate here
	SyncSource []SyncSourceObservation `json:"syncSource,omitempty" tf:"sync_source,omitempty"`
}

type ReplicaParameters struct {

	// The sources to replicate. Documented below.
	// A source database to replicate here
	// +kubebuilder:validation:Optional
	SyncSource []SyncSourceParameters `json:"syncSource" tf:"sync_source,omitempty"`
}

type SyncSourceInitParameters struct {

	// Defines if encryption should be used to connect to the sync source.
	// Defines if encryption should be used to connect to the sync source. If not provided and if the source is a Redis Cloud instance, it will automatically detect if the source uses encryption
	Encryption *bool `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// A Redis URI (sample format: 'redis://user:password@host:port)'. If the URI provided is a Redis Cloud instance, only the host and port should be provided (using the format: ['redis://endpoint1:6379', 'redis://endpoint2:6380'] ).
	// A Redis URI (sample format: 'redis://user:password@host:port)'. If the URI provided is Redis Cloud instance, only host and port should be provided (using the format: ['redis://endpoint1:6379', 'redis://endpoint2:6380'])
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// TLS certificate chain of the sync source.
	// TLS/SSL certificate chain of the sync source. If left null and if the source is a Redis Cloud instance, it will automatically detect the certificate to use
	ServerCert *string `json:"serverCert,omitempty" tf:"server_cert,omitempty"`
}

type SyncSourceObservation struct {

	// Defines if encryption should be used to connect to the sync source.
	// Defines if encryption should be used to connect to the sync source. If not provided and if the source is a Redis Cloud instance, it will automatically detect if the source uses encryption
	Encryption *bool `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// A Redis URI (sample format: 'redis://user:password@host:port)'. If the URI provided is a Redis Cloud instance, only the host and port should be provided (using the format: ['redis://endpoint1:6379', 'redis://endpoint2:6380'] ).
	// A Redis URI (sample format: 'redis://user:password@host:port)'. If the URI provided is Redis Cloud instance, only host and port should be provided (using the format: ['redis://endpoint1:6379', 'redis://endpoint2:6380'])
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// TLS certificate chain of the sync source.
	// TLS/SSL certificate chain of the sync source. If left null and if the source is a Redis Cloud instance, it will automatically detect the certificate to use
	ServerCert *string `json:"serverCert,omitempty" tf:"server_cert,omitempty"`
}

type SyncSourceParameters struct {

	// Defines if encryption should be used to connect to the sync source.
	// Defines if encryption should be used to connect to the sync source. If not provided and if the source is a Redis Cloud instance, it will automatically detect if the source uses encryption
	// +kubebuilder:validation:Optional
	Encryption *bool `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// A Redis URI (sample format: 'redis://user:password@host:port)'. If the URI provided is a Redis Cloud instance, only the host and port should be provided (using the format: ['redis://endpoint1:6379', 'redis://endpoint2:6380'] ).
	// A Redis URI (sample format: 'redis://user:password@host:port)'. If the URI provided is Redis Cloud instance, only host and port should be provided (using the format: ['redis://endpoint1:6379', 'redis://endpoint2:6380'])
	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint" tf:"endpoint,omitempty"`

	// TLS certificate chain of the sync source.
	// TLS/SSL certificate chain of the sync source. If left null and if the source is a Redis Cloud instance, it will automatically detect the certificate to use
	// +kubebuilder:validation:Optional
	ServerCert *string `json:"serverCert,omitempty" tf:"server_cert,omitempty"`
}

// DatabaseSpec defines the desired state of Database
type DatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DatabaseInitParameters `json:"initProvider,omitempty"`
}

// DatabaseStatus defines the observed state of Database.
type DatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Database is the Schema for the Databases API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rediscloud}
type Database struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dataPersistence) || (has(self.initProvider) && has(self.initProvider.dataPersistence))",message="spec.forProvider.dataPersistence is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.replication) || (has(self.initProvider) && has(self.initProvider.replication))",message="spec.forProvider.replication is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscriptionId) || (has(self.initProvider) && has(self.initProvider.subscriptionId))",message="spec.forProvider.subscriptionId is a required parameter"
	Spec   DatabaseSpec   `json:"spec"`
	Status DatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseList contains a list of Databases
type DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Database `json:"items"`
}

// Repository type metadata.
var (
	Database_Kind             = "Database"
	Database_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Database_Kind}.String()
	Database_KindAPIVersion   = Database_Kind + "." + CRDGroupVersion.String()
	Database_GroupVersionKind = CRDGroupVersion.WithKind(Database_Kind)
)

func init() {
	SchemeBuilder.Register(&Database{}, &DatabaseList{})
}
