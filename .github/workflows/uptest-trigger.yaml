# SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
#
# SPDX-License-Identifier: CC0-1.0

name: End to End Testing

on:
  issue_comment:
    types: [created]

env:
  GO_VERSION: "1.21"

jobs:
  check-permissions:
    runs-on: ubuntu-24.04
    outputs:
      permission: ${{ steps.check-permissions.outputs.permission }}
    steps:
      - name: Get Commenter Permissions
        id: check-permissions
        run: |
          echo "Trigger keyword: '/test-examples'"
          echo "Go version: ${{ env.GO_VERSION }}"

          REPO=${{ github.repository }}
          COMMENTER=${{ github.event.comment.user.login }}

          # Fetch the commenter's repo-level permission grant
          GRANTED=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/collaborators/$COMMENTER/permission" | jq -r .permission)

          # Make it accessible in the workflow via a job output -- cannot use env
          echo "User $COMMENTER has $GRANTED permissions"
          echo "permission=$GRANTED" >> "$GITHUB_OUTPUT"

  get-example-list:
    needs: check-permissions
    if: ${{ (needs.check-permissions.outputs.permission == 'admin' || needs.check-permissions.outputs.permission == 'write') && github.event.issue.pull_request != null && contains(github.event.comment.body, '/test-examples')}}
    runs-on: ubuntu-24.04
    outputs:
      example_list: ${{ steps.get-example-list-name.outputs.example-list }}
      example_hash: ${{ steps.get-example-list-name.outputs.example-hash }}

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          submodules: true

      - name: Checkout PR
        id: checkout-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr checkout ${{ github.event.issue.number }}
          git submodule update --init --recursive
          OUTPUT=$(git log -1 --format='%H')
          echo "commit-sha=$OUTPUT" >> $GITHUB_OUTPUT

      - name: Prepare The Example List
        env:
          COMMENT: ${{ github.event.comment.body }}
        id: get-example-list-name
        run: |
          PATHS=$(echo $COMMENT | sed 's/^.*\/test-examples="//g' | cut -d '"' -f 1 | sed 's/,/ /g')
          EXAMPLE_LIST=""
          for P in $PATHS; do EXAMPLE_LIST="${EXAMPLE_LIST},$(find $P -name '*.yaml' | tr '\n' ',')"; done

          sudo apt-get -y install coreutils
          COUNT=$(echo ${EXAMPLE_LIST:1} | grep -o ".yaml" | wc -l)
          if [ $COUNT -gt 1 ]; then EXAMPLE_HASH=$(echo ${EXAMPLE_LIST} | md5sum | cut -f1 -d" "); else EXAMPLE_HASH=$(echo ${EXAMPLE_LIST:1} | sed 's/.$//'); fi

          echo "Examples: ${EXAMPLE_LIST:1}"
          echo "Example Hash: ${EXAMPLE_HASH}"

          echo "example-list=${EXAMPLE_LIST:1}" >> $GITHUB_OUTPUT
          echo "example-hash=${EXAMPLE_HASH}" >> $GITHUB_OUTPUT

      - name: Create Pending Status Check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/statuses/${{ steps.checkout-pr.outputs.commit-sha }} \
            -f state='pending' \
            -f target_url='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
            -f description='Running...' \
            -f context="Uptest-${{ steps.get-example-list-name.outputs.example-hash }}"

  uptest:
    needs:
      - check-permissions
      - get-example-list
    if: ${{ (needs.check-permissions.outputs.permission == 'admin' || needs.check-permissions.outputs.permission == 'write') && github.event.issue.pull_request != null && contains(github.event.comment.body, '/test-examples')}}
    runs-on: ubuntu-24.04
    steps:
      - name: Cleanup Disk
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1
        with:
          large-packages: false
          swap-storage: false

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout PR
        id: checkout-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr checkout ${{ github.event.issue.number }}
          git submodule update --init --recursive
          OUTPUT=$(git log -1 --format='%H')
          echo "commit-sha=$OUTPUT" >> $GITHUB_OUTPUT

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Run Uptest
        id: run-uptest
        env:
          UPTEST_EXAMPLE_LIST: ${{ needs.get-example-list.outputs.example_list }}
          UPTEST_CLOUD_CREDENTIALS: ${{ secrets.UPTEST_CLOUD_CREDENTIALS }}
          UPTEST_DATASOURCE_PATH: ${{ secrets.UPTEST_DATASOURCE_PATH }}
        run: make e2e

      - name: Create Successful Status Check
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/statuses/${{ steps.checkout-pr.outputs.commit-sha }} \
            -f state='success' \
            -f target_url='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
            -f description='Passed' \
            -f context="Uptest-${{ needs.get-example-list.outputs.example-hash }}"

      - name: Create Failed Status Check
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/statuses/${{ steps.checkout-pr.outputs.commit-sha }} \
            -f state='failure' \
            -f target_url='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
            -f description='Failed' \
            -f context="Uptest-${{ needs.get-example-list.outputs.example-hash }}"

      - name: Collect Cluster Dump
        if: failure()
        run: |
          make controlplane.dump
          tar -czf cluster-dump.tar.gz _output/cluster-dump

      - name: Upload Cluster Dump
        if: failure()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4
        with:
          name: cluster-dump-uptest
          path: cluster-dump.tar.gz